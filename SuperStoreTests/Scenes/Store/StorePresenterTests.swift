//
//  StorePresenterTests.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 23/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SuperStore
import XCTest

class StorePresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: StorePresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupStorePresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupStorePresenter()
    {
        sut = StorePresenter()
    }
    
    // MARK: Test doubles
    
    class StoreDisplayLogicMock: StoreDisplayLogic
    {
        var displayStoreCalled: Bool = false
        var displayedStore: Store.DisplayedStore? = nil
        
        func displayStore(viewModel: Store.GetStore.ViewModel) {
            self.displayedStore = viewModel.displayedStore
            displayStoreCalled = true
        }
        
        func verifyStoreMatches(actualStore store: StoreModel) -> Bool {
            if let displayedStore = displayedStore {
                
                return
                    store.name == displayedStore.name &&
                    store.logo == displayedStore.logo &&
                    store.storeTypeID == displayedStore.storeTypeID &&
                    
                    verifyAddressMatches(actualLocation: store.location, displayLocation: displayedStore.address) &&
                    verifyHoursMatch(actualOpeningHours: store.openingHours, displayOpeningHours: displayedStore.openingHours) &&
                    verifyFacilitiesMatch(actualFacilities: store.facilities, displayFacilities: displayedStore.facilities)
            }
            
            return false
        }
        
        
        private func verifyAddressMatches(actualLocation: LocationModel, displayLocation: String) -> Bool {
            let addressList = [
                actualLocation.addressLine1,
                actualLocation.addressLine2,
                actualLocation.addressLine3,
                actualLocation.city
            ]
            
            let storeAddres = addressList.compactMap { $0 }.joined(separator: ", ")
            
            return storeAddres == displayLocation
        }
        
        private func verifyHoursMatch(actualOpeningHours: [OpeningHourModel], displayOpeningHours: [Store.DisplayOpeningHour]) -> Bool {
            return
                verifyHourMatch(actualHour: actualOpeningHours[0], displayedHour: displayOpeningHours[0]) &&
                verifyHourMatch(actualHour: actualOpeningHours[1], displayedHour: displayOpeningHours[1]) &&
                verifyHourMatch(actualHour: actualOpeningHours[2], displayedHour: displayOpeningHours[2]) &&
                verifyHourMatch(actualHour: actualOpeningHours[3], displayedHour: displayOpeningHours[3]) &&
                verifyHourMatch(actualHour: actualOpeningHours[4], displayedHour: displayOpeningHours[4]) &&
                verifyHourMatch(actualHour: actualOpeningHours[5], displayedHour: displayOpeningHours[5]) &&
                verifyHourMatch(actualHour: actualOpeningHours[6], displayedHour: displayOpeningHours[6])
        }
        
        private func verifyHourMatch(actualHour: OpeningHourModel, displayedHour: Store.DisplayOpeningHour) -> Bool {
            
            let today: Bool = actualHour.dayOfWeek == getDayOfWeek()
            
            return
                actualHour.dayOfWeek == displayedHour.dayOfWeek &&
                actualHour.closedToday == displayedHour.closedToday &&
                displayedHour.today == today &&
                "\(actualHour.opensAt!) - \(actualHour.closesAt!)".lowercased() == displayedHour.hours.lowercased()
        }
        
        private func getDayOfWeek() -> Int {
            var dayOfWeek = Calendar.current.component(.weekday, from: Date()) - 2
            if dayOfWeek == -1 {
                dayOfWeek = 6
            }
            
            return dayOfWeek
        }
        
        
        private func verifyFacilitiesMatch(actualFacilities: [String], displayFacilities: [Store.DisplayFacility]) -> Bool {
            var matchedFacilitiesCount: Int = 0
            
            for (index, actualFacility) in actualFacilities.enumerated() {
                
                if displayFacilities.indices.contains(index) {
                    let displayFacility = displayFacilities[index]
                    
                    if(actualFacility == displayFacility.name){
                        matchedFacilitiesCount += 1
                    }
                } else {
                    XCTFail("Count of Displayed Facilities And Store Facilities Should Be Equal: \(actualFacilities.count) vs \(displayFacilities.count)")
                }
                
            }
            
            return matchedFacilitiesCount == actualFacilities.count
            
        }
    }
    
    // MARK: Tests
    
    func testPresentStore()
    {
        // Given
        let storeDisplayMock = StoreDisplayLogicMock()
        sut.viewController = storeDisplayMock
        
        let store = Seeds.StoreSeed.Stores.first!
        let response = Store.GetStore.Response(store: store, error: nil)
        
        // When
        sut.presentStore(response: response)
        
        // Then
        XCTAssertTrue(storeDisplayMock.displayStoreCalled, "presentStore(response:) should ask the view controller to display the store")
    }
    
    func testPresentStoreCorrectFormat()
    {
        // Given
        let storeDisplayMock = StoreDisplayLogicMock()
        sut.viewController = storeDisplayMock
        
        let store = Seeds.StoreSeed.Stores.first!
        let response = Store.GetStore.Response(store: store, error: nil)
        
        // When
        sut.presentStore(response: response)
        
        // Then
        XCTAssertTrue(
            storeDisplayMock.verifyStoreMatches(actualStore: store),
            "presentStore(response:) should ask the view controller to display the store in correct format"
        )
    }
}
