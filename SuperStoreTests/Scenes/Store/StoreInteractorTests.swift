//
//  StoreInteractorTests.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 23/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SuperStore
import XCTest

class StoreInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: StoreInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupStoreInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupStoreInteractor()
    {
        sut = StoreInteractor()
    }
    
    // MARK: Test doubles
    
    class StorePresentationLogicSpy: StorePresentationLogic
    {
        var presentStoreCalled: Bool = false
        var response: Store.GetStore.Response? = nil
        
        func presentStore(response: Store.GetStore.Response) {
            self.response = response
            presentStoreCalled = true
        }
    }
    
    
    class StoreAPISpy: StoreRequestProtocol {
        func getStore(storeID: Int, completionHandler: @escaping (StoreModel?, String?) -> Void) {
            let store = Seeds.StoreSeed.Stores.first!
            completionHandler(store, nil)
        }
        
        func getStores(storeTypeID: Int, latitude: Double?, longitude: Double?, completionHandler: @escaping ([StoreModel], String?) -> Void) {
            let stores = Seeds.StoreSeed.Stores
            completionHandler(stores, nil)
        }
    }
    
    class StoreWorkerSpy: StoreWorker
    {
        var storeID: Int? = nil
        var errorMessage: String? = nil
        
        override func getStore(storeID: Int, completionHandler: @escaping (StoreModel?, String?) -> Void) {
            if errorMessage != nil {
                completionHandler(nil, errorMessage)
            } else {
                self.storeID = storeID
                self.storeAPI.getStore(storeID: storeID, completionHandler: completionHandler)
            }
        }
    }
    
    class UserSessionWorkerSpy: UserSessionWorker
    {
        var online: Bool = true
        
        override func isOnline() -> Bool {
            return online
        }
    }
    
    // MARK: Tests
    
    func testGetStoreShouldFormatStoreResults()
    {
        // Given
        let storePresentationSpy = StorePresentationLogicSpy()
        let storeWorkerSpy = StoreWorkerSpy(storeAPI: StoreAPISpy())
        
        sut.presenter = storePresentationSpy
        sut.storeWorker = storeWorkerSpy
        
        let request = Store.GetStore.Request()
        
        // When
        sut.getStore(request: request)
        
        // Then
        XCTAssertTrue(storePresentationSpy.presentStoreCalled, "getStore(request:) should ask the presenter to format the store result")
    }
    
    func testGetStoreShouldUseCorrectStoreID()
    {
        // Given
        let storePresentationSpy = StorePresentationLogicSpy()
        let storeWorkerSpy = StoreWorkerSpy(storeAPI: StoreAPISpy())
        
        sut.storeID = 1057
        sut.presenter = storePresentationSpy
        sut.storeWorker = storeWorkerSpy
        
        let request = Store.GetStore.Request()
        
        // When
        sut.getStore(request: request)
        
        // Then
        XCTAssertEqual(storeWorkerSpy.storeID, 1057, "The interactor storeID should be used to send the get store request")
    }
    
    func testGetStoreShouldFormatCorrectErrors()
    {
        // Given
        let storePresentationSpy = StorePresentationLogicSpy()
        let storeWorkerSpy = StoreWorkerSpy(storeAPI: StoreAPISpy())
        let userSessionSpy = UserSessionWorkerSpy()
        
        let errorMessage: String = "Failed To Find Store"
        
        storeWorkerSpy.errorMessage = errorMessage
        
        userSessionSpy.online = false
        
        sut.presenter = storePresentationSpy
        sut.storeWorker = storeWorkerSpy
        sut.userSession = userSessionSpy
        
        let request = Store.GetStore.Request()
        
        // When
        sut.getStore(request: request)
        
        let response = storePresentationSpy.response
        
        // Then
        XCTAssertEqual(response?.error, errorMessage, "getStore(request:) should ask the presenter to return correct error message")
        XCTAssertTrue(response!.offline, "getStore(request:) should ask the presenter to return offline error")
    }
}
