//
//  FavouritesViewControllerTests.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 24/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SuperStore
import XCTest

class FavouritesViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: FavouritesViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupFavouritesViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupFavouritesViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "FavouritesViewController") as? FavouritesViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class FavouritesRoutingLoginSpy: NSObject, FavouritesRoutingLogic, FavouritesDataPassing {
        var dataStore: FavouritesDataStore?
        var selectedProductID: Int?
        
        var routeToLoginCalled: Bool = false
        var routeToShowProductCalled: Bool = false
        
        func routeToShowProduct(segue: UIStoryboardSegue?) {
            routeToShowProductCalled = true
        }
        
        func routeToLogin(segue: UIStoryboardSegue?) {
            routeToLoginCalled = true
        }
    }
    
    class FavouritesBusinessLogicSpy: FavouritesBusinessLogic
    {
        var getFavouritesCalled: Bool = false
        var deleteFavouriteCalled: Bool = false
        var navigateToProductCalled: Bool = false
        
        func getFavourites(request: Favourites.GetFavourites.Request) {
            getFavouritesCalled = true
        }
        
        func deleteFavourite(request: Favourites.DeleteFavourite.Request) {
            deleteFavouriteCalled = true
        }
        
        func navigateToProduct(indexPath: IndexPath){
            navigateToProductCalled = true
        }
    }
    
    class UserSessionMock: UserSessionWorker {
        var loggedIn: Bool = false
        
        override func isLoggedIn() -> Bool {
            return loggedIn
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchFavouritesOnLoadedWhenLoggedIn()
    {
        // Given
        let favouriteSpy = FavouritesBusinessLogicSpy()
        let userSessionMock = UserSessionMock()
        
        userSessionMock.loggedIn = true
        
        sut.interactor = favouriteSpy
        sut.userSession = userSessionMock
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(favouriteSpy.getFavouritesCalled, "viewDidLoad() should ask the interactor to get favourites on logged in")
    }
    
    func testShouldLoginToUseOnLoadedWhenLoggedOut()
    {
        // Given
        let favouriteSpy = FavouritesBusinessLogicSpy()
        let userSessionMock = UserSessionMock()
        
        userSessionMock.loggedIn = false
        
        sut.interactor = favouriteSpy
        sut.userSession = userSessionMock
        
        // When
        loadView()
        
        // Then
        XCTAssertFalse(favouriteSpy.getFavouritesCalled, "viewDidLoad() should not ask the interactor to get favourites on logged out")

        if let loginCell = sut.favouriteTableView.cellForRow(at: IndexPath(row: 0, section: 0)) as? RequestLoginCell {
            XCTAssertEqual(loginCell.titleLabel.text, "Favourites", "RequestLoginCell title should be Favourites")
            XCTAssertEqual(loginCell.descriptionLabel.text, "Login to view your favourites." , "RequestLoginCell description should be Login to view your favourites")
            XCTAssertEqual(loginCell.iconImageView.image?.imageAsset, UIImage(systemName: "star")?.imageAsset,  "RequestLoginCell icon should be a start")
        } else {
            XCTFail("LoginToView TableViewCell Row Not Found At Row: 0")
        }
    }
    
    func testShouldShowAllFetchedFavouriteProducts()
    {
        // Given
        let favouriteSpy = FavouritesBusinessLogicSpy()
        let userSessionMock = UserSessionMock()
        
        userSessionMock.loggedIn = true
        
        sut.interactor = favouriteSpy
        sut.userSession = userSessionMock
        
        let products = Seeds.ProductSeed.Products
        let viewModel = Favourites.GetFavourites.ViewModel(products: products)
        
        // When
        loadView()
        sut.displayFavourites(viewModel: viewModel)
        
        // Then
        var matchedProductsCount: Int = 0
        
        for (index, product) in products.enumerated() {
            if let cell = sut.favouriteTableView.cellForRow(at: IndexPath(row: index, section: 0)) as? ProductCell {
                if cell.product == product {
                    matchedProductsCount += 1
                }
            } else {
                XCTFail("Favourites TableViewCell Row Not Found At Row: \(index)")
            }
        }
        
        XCTAssertEqual(matchedProductsCount, products.count, "displayFavourites(viewModel:) should update the tableview correctly")
    }
    
    func testShouldFetchFavouritesOnRefrehed(){
        // Given
        let favouriteSpy = FavouritesBusinessLogicSpy()
        let userSessionMock = UserSessionMock()
        
        userSessionMock.loggedIn = true
        
        sut.interactor = favouriteSpy
        sut.userSession = userSessionMock
        
        loadView()
        
        // When
        sut.favouriteTableView.reloadData()
        
        // Then
        XCTAssertTrue(favouriteSpy.getFavouritesCalled, "favouriteTableView.reloadData() should request all favourite products")
    }
    
    func testShouldRemoveProductOnDeleted(){
        // Given
        let favouriteSpy = FavouritesBusinessLogicSpy()
        
        sut.interactor = favouriteSpy
        
        let products = Seeds.ProductSeed.Products
        let viewModel = Favourites.GetFavourites.ViewModel(products: products)
        
        loadView()
        sut.displayFavourites(viewModel: viewModel)
        
        // When
        sut.deleteFavourite(indexPath: IndexPath(row: 0, section: 0))
        
        // Then
        XCTAssertTrue(favouriteSpy.deleteFavouriteCalled, "deleteFavourite() should request delete product")

    }
    
    func testShouldNavigateOnProductPressed(){
        // Given
        let routerSpy = FavouritesRoutingLoginSpy()
        
        sut.router = routerSpy
        
        let products = Seeds.ProductSeed.Products
        let viewModel = Favourites.GetFavourites.ViewModel(products: products)
        
        loadView()
        sut.displayFavourites(viewModel: viewModel)
        
        // When
        sut.tableView(sut.favouriteTableView, didSelectRowAt: IndexPath(row: 0, section: 0))
        
        // Then
        XCTAssertTrue(routerSpy.routeToShowProductCalled, "tableview(didSelectRowAt:) should ask router to route to product")
    }
    
}
