//
//  VerifyCodeInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 26/02/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VerifyCodeBusinessLogic
{
    func verifyCode(request: VerifyCode.VerifyCode.Request)
}

protocol VerifyCodeDataStore
{
    var email: String { get set }
    var code: String { get set }
}

class VerifyCodeInteractor: VerifyCodeBusinessLogic, VerifyCodeDataStore
{
    var presenter: VerifyCodePresentationLogic?
    var resetWorker: ResetPasswordWorker = ResetPasswordWorker(passwordReset: ResetPasswordAPI())
    
    var validationWorker: UserValidationWorker = UserValidationWorker()
    
    var email: String = ""
    var code: String = ""
    
    // MARK: Do something
    
    func verifyCode(request: VerifyCode.VerifyCode.Request)
    {
        let code = request.code
        
        let error = validateForm(code: code)
        
        self.code = code
        
        if error == nil {
            resetWorker.verifyCode(email: email, code: code) { (error: String?) in
                let response = VerifyCode.VerifyCode.Response(error: error)
                self.presenter?.presentCodeVerified(response: response)
            }
        }

    }
    
    func validateForm(code: String) -> String? {
        
        let formFields: [UserFormField] = [
            UserFormField(name: "Reset Code", value: code, type: .code)
        ]
        
        let error = validationWorker.validateFields(formFields)

        if let error = error {
            let response = VerifyCode.VerifyCode.Response(error: error)
            presenter?.presentCodeVerified(response: response)
            return error
        }
        
        return nil
    }
}
