//
//  EditListItemViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 05/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ImageSlideshow
import AlamofireImage

protocol EditListItemDisplayLogic: AnyObject
{
    func displayListItem(viewModel: EditListItem.GetListItem.ViewModel)
    func displayListItemDeleted(viewModel: EditListItem.DeleteListItem.ViewModel)
    func displayListItemUpdate(viewModel: EditListItem.UpdateListItem.ViewModel)
    
    func displayUpdateQuantity(viewModel: EditListItem.UpdateQuantity.ViewModel)
}

class EditListItemViewController: UIViewController, EditListItemDisplayLogic
{

    var interactor: EditListItemBusinessLogic?
    var router: (NSObjectProtocol & EditListItemRoutingLogic & EditListItemDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EditListItemInteractor()
        let presenter = EditListItemPresenter()
        let router = EditListItemRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupPlusMinusGesture()
        setupImageSlider()
        getListItem()
    }
    
    @IBOutlet var slideshow: ImageSlideshow!
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var nameLabel: UILabel!
    
    var quantity: Int = 1
    
    @IBOutlet var quantityLabel: UILabel!
    @IBOutlet var priceLabel: UILabel!
    
    @IBOutlet var minusView: UIView!
    @IBOutlet var plusView: UIView!
    
    @IBOutlet var weightLabel: UILabel!
    @IBOutlet var promotionButton: UIButton!
    @IBOutlet var weightView: UIView!
    
    var displayedListItem: EditListItem.DisplayedListItem!
    
    func getListItem()
    {
        let request = EditListItem.GetListItem.Request()
        interactor?.getListItem(request: request)
    }
    
    func displayUpdateQuantity(viewModel: EditListItem.UpdateQuantity.ViewModel) {
        displayedListItem = viewModel.displayedListItem
        
        displayQuantity()
        displayPrice()
    }

    
    func displayListItem(viewModel: EditListItem.GetListItem.ViewModel)
    {
        displayedListItem = viewModel.displayedListItem
        
        nameLabel.text = displayedListItem.name
        quantity = displayedListItem.quantity
        
        createSlideShowImages(image: displayedListItem.image)
        
        displayWeight()
        displayPromotion()
        
        displayPrice()
        displayQuantity()
    }
    
    func displayListItemDeleted(viewModel: EditListItem.DeleteListItem.ViewModel) {
        stopLoading()
        showRightBarButton()
        
        if let error = viewModel.error, !viewModel.offline {
            showError(title: "Delete Error", error: error)
        } else {
            router?.routeToShowList(segue: nil)
        }
    }
    
    func displayListItemUpdate(viewModel: EditListItem.UpdateListItem.ViewModel) {
        stopLoading()
        showRightBarButton()
        
        if let error = viewModel.error, !viewModel.offline {
            showError(title: "Update Error", error: error)
        } else {
            router?.routeToShowList(segue: nil)
        }
    }
    
}

extension EditListItemViewController {
    
    func displayWeight(){
        if let weight = displayedListItem.weight {
            weightLabel.text = weight
        } else {
            weightView.removeFromSuperview()
        }
    }
    
    func displayPromotion(){
        if let promotion = displayedListItem.promotion {
            promotionButton.setTitle(promotion.name, for: .normal)
        } else {
            promotionButton.removeFromSuperview()
        }
    }
    
    func displayPrice(){
        priceLabel.text = displayedListItem.price
    }
    
    func displayQuantity(){
        quantityLabel.text = String(quantity)
    }
}

extension EditListItemViewController {
    @IBAction func saveButtonPressed(_ button: UIButton) {
        startLoading()
        hideRightBarButton()
        
        let request = EditListItem.UpdateListItem.Request()
        interactor?.updateListItem(request: request)
    }
    
    @IBAction func promotionButtonPressed(_ button: UIButton) {
        router?.routeToShowPromotion(segue: nil)
    }
    
    @IBAction func deleteButtonPressed(_ button: UIButton) {
        startLoading()
        hideRightBarButton()
        
        let request = EditListItem.DeleteListItem.Request()
        interactor?.deleteListItem(request: request)
    }
}

extension EditListItemViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}


extension EditListItemViewController: ImageSlideshowDelegate {
    
    func setupImageSlider(){
        
        slideshow.contentScaleMode = .scaleAspectFit
        
        slideshow.activityIndicator = DefaultActivityIndicator(style: .medium, color: .label)
        
        slideshow.zoomEnabled = true
        slideshow.pageIndicatorPosition = .init(horizontal: .center, vertical: .under)
        
        let pageIndicator = UIPageControl()
        pageIndicator.currentPageIndicatorTintColor = .label
        pageIndicator.pageIndicatorTintColor = .quaternaryLabel

        slideshow.pageIndicator = pageIndicator
        
        slideshow.activityIndicator = DefaultActivityIndicator()
        slideshow.delegate = self
        
        setupImageGesture()
    }
    
    func createSlideShowImages(image: String?){
        var sources: [InputSource] = []
        
        if let image = image, let imageSource = AlamofireSource(urlString: image) {
            sources.append(imageSource)
        } else {
            sources.append(ImageSource(image: UIImage(named: "No Image")!))
        }
    
        slideshow.setImageInputs(sources)
    }
    
    func setupImageGesture(){
        let gestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(imagePressed))
        slideshow.addGestureRecognizer(gestureRecognizer)
    }
    
    func setupPlusMinusGesture(){
        let plusViewGesture = UITapGestureRecognizer(target: self, action: #selector(plusButtonPressed))
        plusView.addGestureRecognizer(plusViewGesture)
        
        let minusViewGesture = UITapGestureRecognizer(target: self, action: #selector(minusButtonPressed))
        minusView.addGestureRecognizer(minusViewGesture)
    }
    
    @objc func imagePressed() {
        slideshow.presentFullScreenController(from: self)
    }
    
}

extension EditListItemViewController {
    @IBAction func plusButtonPressed(_ sender: UIButton) {
        quantity += 1
        updateQuantity()
    }
    
    @IBAction func minusButtonPressed(_ sender: UIButton) {
        if quantity > 0 {
            quantity -= 1
            updateQuantity()
        }
    }
    
    private func updateQuantity(){
        displayQuantity()
        
        let request = EditListItem.UpdateQuantity.Request(quantity: quantity)
        interactor?.updateQuantity(request: request)
    }
}

extension EditListItemViewController {
    func showRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = true
    }
    
    func hideRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = false
    }
}
