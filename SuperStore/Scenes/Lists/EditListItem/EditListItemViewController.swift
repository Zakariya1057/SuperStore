//
//  EditListItemViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 05/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditListItemDisplayLogic: class
{
    func displayListItem(viewModel: EditListItem.GetListItem.ViewModel)
    func displayListItemDeleted(viewModel: EditListItem.DeleteListItem.ViewModel)
    func displayListItemUpdate(viewModel: EditListItem.UpdateListItem.ViewModel)
    
    func displayUpdateQuantity(viewModel: EditListItem.UpdateQuantity.ViewModel)
}

class EditListItemViewController: UIViewController, EditListItemDisplayLogic
{

    var interactor: EditListItemBusinessLogic?
    var router: (NSObjectProtocol & EditListItemRoutingLogic & EditListItemDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EditListItemInteractor()
        let presenter = EditListItemPresenter()
        let router = EditListItemRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getListItem()
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var itemImageView: UIImageView!
    @IBOutlet var nameLabel: UILabel!
    @IBOutlet var quantityLabel: UILabel!
    @IBOutlet var priceLabel: UILabel!
    @IBOutlet var quantityStepper: UIStepper!
    
    @IBOutlet var promotionButton: UIButton!
    
    var displayedListItem: EditListItem.DisplayedListItem!
    
    func getListItem()
    {
        let request = EditListItem.GetListItem.Request()
        interactor?.getListItem(request: request)
    }
    
    func displayUpdateQuantity(viewModel: EditListItem.UpdateQuantity.ViewModel) {
        displayedListItem = viewModel.displayedListItem
        
        displayQuantity()
        displayPrice()
    }
    
    func displayListItem(viewModel: EditListItem.GetListItem.ViewModel)
    {
        displayedListItem = viewModel.displayedListItem
        
        nameLabel.text = displayedListItem.name
        
        if let image = displayedListItem.image {
            itemImageView.downloaded(from: image)
        }
        
        if let promotion = displayedListItem.promotion {
            promotionButton.setTitle(promotion.name, for: .normal)
        } else {
            promotionButton.removeFromSuperview()
        }
        
        displayPrice()
        displayQuantity()
    }
    
    func displayListItemDeleted(viewModel: EditListItem.DeleteListItem.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Delete Error", error: error)
        } else {
            router?.routeToShowList(segue: nil)
        }
    }
    
    func displayListItemUpdate(viewModel: EditListItem.UpdateListItem.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Update Error", error: error)
        } else {
            router?.routeToShowList(segue: nil)
        }
    }
    
}

extension EditListItemViewController {
    func displayPrice(){
        priceLabel.text = displayedListItem.price
    }
    
    func displayQuantity(){
        let quantity = displayedListItem.quantity
        
        quantityStepper.value = Double(quantity)
        quantityLabel.text = String(quantity)
    }
}

extension EditListItemViewController {
    @IBAction func saveButtonPressed(_ button: UIButton) {
        startLoading()
        
        let request = EditListItem.UpdateListItem.Request()
        interactor?.updateListItem(request: request)
    }
    
    @IBAction func promotionButtonPressed(_ button: UIButton) {
        router?.routeToShowPromotion(segue: nil)
    }
    
    @IBAction func deleteButtonPressed(_ button: UIButton) {
        startLoading()
        
        let request = EditListItem.DeleteListItem.Request()
        interactor?.deleteListItem(request: request)
    }
    
    @IBAction func quantityStepperPressed(_ stepper: UIStepper) {
        let quantity = Int(stepper.value)
        
        let request = EditListItem.UpdateQuantity.Request(quantity: quantity)
        interactor?.updateQuantity(request: request)
    }
}

extension EditListItemViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}
