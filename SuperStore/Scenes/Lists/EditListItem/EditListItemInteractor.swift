//
//  EditListItemInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 05/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditListItemBusinessLogic
{
    func getListItem(request: EditListItem.GetListItem.Request)
    func updateQuantity(request: EditListItem.UpdateQuantity.Request)
    func deleteListItem(request: EditListItem.DeleteListItem.Request)
    func updateListItem(request: EditListItem.UpdateListItem.Request)
}

protocol EditListItemDataStore
{
    var listID: Int! { get set }
    var listItem: ListItemModel! { get set }
}

class EditListItemInteractor: EditListItemBusinessLogic, EditListItemDataStore
{
    
    var presenter: EditListItemPresentationLogic?
    
    var listPriceWorker: ListPriceWorker = ListPriceWorker()
    var listItemWorker: ListItemWorker = ListItemWorker(listItemAPI: ListItemAPI())
    
    var listID: Int!
    var listItem: ListItemModel!
    
    // MARK: Do something
    
    func getListItem(request: EditListItem.GetListItem.Request)
    {
        listItem.promotion = PromotionModel(id: 1, name: "Promotion Name", quantity: 1, price: 1, forQuantity: 1)
        
        let response = EditListItem.GetListItem.Response(listItem: listItem)
        presenter?.presentListItem(response: response)
    }
    
    func saveListItem(){
        
    }
    func updateQuantity(request: EditListItem.UpdateQuantity.Request){
        let quantity = request.quantity
        let price = listItem.price
        let promotion = listItem.promotion
        
        let newPrice = listPriceWorker.calculateItemPrice(price: price, quantity: quantity, promotion: promotion)

        listItem.quantity = quantity
        listItem.totalPrice = newPrice
        
        let response = EditListItem.GetListItem.Response(listItem: listItem)
        presenter?.presentListItem(response: response)
    }

    func deleteListItem(request: EditListItem.DeleteListItem.Request){
        let productID: Int = listItem.productID
        
        listItemWorker.deleteItem(listID: listID, productID: productID) { (error: String?) in
            let response = EditListItem.DeleteListItem.Response(error: error)
            self.presenter?.presentListItemDeleted(response: response)
        }
    }
    
    func updateListItem(request: EditListItem.UpdateListItem.Request) {
        let productID: Int = listItem.productID
        let quantity: Int = listItem.quantity
        let tickedOff = listItem.tickedOff
        
        listItemWorker.updateItem(listID: listID, productID: productID, quantity: quantity, tickedOff: tickedOff) { (error: String?) in
            let response = EditListItem.UpdateListItem.Response(error: error)
            self.presenter?.presentListItemUpdated(response: response)
        }
    }
}
