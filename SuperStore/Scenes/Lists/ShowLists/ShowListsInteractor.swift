//
//  ShowListsInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 04/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowListsBusinessLogic
{
    func getLists(request: ShowLists.GetLists.Request)
    func deleteList(request: ShowLists.DeleteList.Request)
    func searchList(request: ShowLists.SearchList.Request)
    
    var addToList: Bool { get set }
}

protocol ShowListsDataStore
{
    var lists: [ListModel] { get set }
    var addToList: Bool { get set }
}

class ShowListsInteractor: ShowListsBusinessLogic, ShowListsDataStore
{
    var presenter: ShowListsPresentationLogic?
    
    var listWorker: ListWorker = ListWorker(listAPI: ListAPI())
    var userSession = UserSessionWorker()
    
    var addToList: Bool = false
    var lists: [ListModel] = []
    
    
    func getLists(request: ShowLists.GetLists.Request)
    {
        let storeTypeID = userSession.getStore()
        
        listWorker.getLists(storeTypeID: storeTypeID) { (lists: [ListModel], error: String?) in
            self.lists = lists
            
            let response = ShowLists.GetLists.Response(lists: lists, error: error)
            self.presenter?.presentLists(response: response)
        }
    }
    
    func deleteList(request: ShowLists.DeleteList.Request)
    {
        let listID = request.listID
        listWorker.deleteList(listID: listID) { (error: String?) in
            let response = ShowLists.DeleteList.Response(indexPath: request.indexPath, error: error)
            self.presenter?.presentListDeleted(response: response)
        }
    }
    
    func searchList(request: ShowLists.SearchList.Request){
        let query = request.query
        listWorker.searchLists(query: query) { (lists: [ListModel]) in
            let response = ShowLists.GetLists.Response(lists: lists, error: nil)
            self.presenter?.presentLists(response: response)
        }
    }
}
