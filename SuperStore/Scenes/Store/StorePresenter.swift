//
//  StorePresenter.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StorePresentationLogic
{
    func presentStore(response: Store.GetStore.Response)
}

class StorePresenter: StorePresentationLogic
{
    weak var viewController: StoreDisplayLogic?
    
    // MARK: Do something
    
    func presentStore(response: Store.GetStore.Response)
    {
        
        var displayedStore: Store.DisplayedStore?
        
        if let store = response.store {
            let openingHours = createOpeningHours(openingHour: store.openingHours)
            let facilities = createFacilites(facilites: store.facilities)
            
            displayedStore = Store.DisplayedStore(
                name: store.name,
                logo: store.logo,
                address: store.address,
                openingHours: openingHours,
                facilites: facilities
            )
        }
        
        let viewModel = Store.GetStore.ViewModel(displayedStore: displayedStore, error: response.error)
        viewController?.displayStore(viewModel: viewModel)
    }
}

extension StorePresenter {
    private func createFacilites(facilites: [String]) -> Store.DisplayFacilites? {
        
        let displayFacilities: Store.DisplayFacilites = Store.DisplayFacilites()
        
        if facilites.count == 0 {
            return nil
        } else {
            for facility in facilites {
                switch facility.lowercased() {
                
                case "baby changing":
                    displayFacilities.babyChanging = true
                    break
                case "car park":
                    displayFacilities.carPark = true
                    break
                case "cash machine":
                    displayFacilities.ATM = true
                    break
                case "customer wc":
                    displayFacilities.customerWC = true
                    break
                case "disabled facilities":
                    displayFacilities.disabledAccess = true
                    break
                case "helium balloons":
                    displayFacilities.heliumBaloons = true
                    break
                case "paypoint":
                    displayFacilities.paypoint = true
                    break
                case "petrol filling station":
                    displayFacilities.petrolFillingStation = true
                    break
                case "photo cake machines":
                    displayFacilities.photoCakeMachines = true
                    break
                default:
                    break
                }
            }
        }
        
        return displayFacilities
    }
    
    private func createOpeningHours(openingHour: [OpeningHourModel]) -> [Store.DisplayOpeningHour]{
        var displayOpeningHours: [Store.DisplayOpeningHour] = []
        
        let dayOfWeek = getDayOfWeek()
        
        for hour in openingHour {
            var openTimes: String = "Closed"
            
            if hour.opensAt != nil && hour.closesAt != nil{
                openTimes = "\(hour.opensAt!) - \(hour.closesAt!)".lowercased()
            }
            
            let today = dayOfWeek == hour.dayOfWeek
            
            let displayOpeningHour = Store.DisplayOpeningHour(today: today, hours: openTimes, dayOfWeek: hour.dayOfWeek, closedToday: hour.closedToday)
            displayOpeningHours.append(displayOpeningHour)
        }
        
        return displayOpeningHours
    }
    
}

extension StorePresenter {
    private func getDayOfWeek() -> Int {
        var dayOfWeek = Calendar.current.component(.weekday, from: Date()) - 2
        if dayOfWeek == -1 {
            dayOfWeek = 6
        }
        
        return dayOfWeek
    }
}
