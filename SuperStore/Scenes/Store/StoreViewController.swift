//
//  StoreViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StoreDisplayLogic: class
{
    func displayStore(viewModel: Store.GetStore.ViewModel)
}

class StoreViewController: UIViewController, StoreDisplayLogic
{
    var interactor: StoreBusinessLogic?
    var router: (NSObjectProtocol & StoreRoutingLogic & StoreDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = StoreInteractor()
        let presenter = StorePresenter()
        let router = StoreRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayRightBarButton()
        getStore()
    }
    
    
    @IBOutlet weak var logoImageView: UIImageView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var addressLabel: UILabel!
    
    @IBOutlet var openingHoursDayLabels: [UILabel]!
    @IBOutlet var openingHoursTimeLabels: [UILabel]!
    
    // Facilities Labels START
    @IBOutlet weak var carParkView: UIStackView!
    @IBOutlet weak var customerWCView: UIStackView!
    @IBOutlet weak var heliumBalloonsView: UIStackView!
    @IBOutlet weak var disabledView: UIStackView!
    @IBOutlet weak var chargingView: UIStackView!
    @IBOutlet weak var paypointView: UIStackView!
    @IBOutlet weak var atmView: UIStackView!
    @IBOutlet weak var babyChangingView: UIStackView!
    @IBOutlet weak var petrolFillingStationView: UIStackView!
    // Facilities Labels END
    
    func getStore()
    {
        let request = Store.GetStore.Request()
        interactor?.getStore(request: request)
    }
    
    func displayStore(viewModel: Store.GetStore.ViewModel)
    {
        if let error = viewModel.error {
            showError(title: "Store Error", error: error)
        } else {
            if let store = viewModel.displayedStore {
                nameLabel.text = store.name
                addressLabel.text = store.address
                logoImageView.downloaded(from: store.logo)
                

                displayOpeningHours(openingHours: store.openingHours)
                displayFacilities(facilities: store.facilites)
            }
        }
        
    }
    
    func displayRightBarButton(){
        if interactor?.selectedListID == nil {
            self.navigationItem.rightBarButtonItem = nil
        }
    }
    
    private func displayOpeningHours(openingHours: [Store.GetStore.ViewModel.DisplayOpeningHour]){
        for (index, opening) in openingHours.enumerated() {
            // Set Hours
            let hourLabel: UILabel = openingHoursTimeLabels[index]
            let dayLabel: UILabel = openingHoursDayLabels[index]
            
            hourLabel.text = opening.hours
            
            if opening.today {
                
                if opening.closedToday {
                    dayLabel.textColor = .systemRed
                    hourLabel.textColor = .systemRed
                } else {
                    dayLabel.textColor = .systemBlue
                    hourLabel.textColor = .systemBlue
                }
                
            }
        }
    }
    
    private func displayFacilities(facilities: Store.GetStore.ViewModel.DisplayFacilites){
        let facilitySettings: [UIView: Bool] = [
            carParkView: facilities.carPark,
            atmView: facilities.ATM,
            babyChangingView: facilities.babyChanging,
            customerWCView: facilities.customerWC,
            heliumBalloonsView: facilities.heliumBaloons,
            disabledView: facilities.disabledAccess,
            chargingView: facilities.electricVehicleChargingPoint,
            paypointView: facilities.paypoint,
            petrolFillingStationView: facilities.petrolFillingStation
            
        ]
        
        for (facilityView, facilityEnabled) in facilitySettings {
            if !facilityEnabled {
                facilityView.removeFromSuperview()
            }
        }
    }
}


extension StoreViewController {
    @IBAction func doneButtonPressed(_ sender: UIBarButtonItem) {
        router?.routeToShowList(segue: nil)
    }
}
