//
//  ShowFlyerViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 23/05/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PDFKit

protocol ShowFlyerDisplayLogic: AnyObject
{
    func displayFlyer(viewModel: ShowFlyer.GetFlyer.ViewModel.DisplayedFlyer)
    func displayProduct(viewModel: ShowFlyer.GetProducts.ViewModel)
}

class ShowFlyerViewController: UIViewController, ShowFlyerDisplayLogic
{
    var interactor: ShowFlyerBusinessLogic?
    var router: (NSObjectProtocol & ShowFlyerRoutingLogic & ShowFlyerDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowFlyerInteractor()
        let presenter = ShowFlyerPresenter()
        let router = ShowFlyerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupProductsTable()
        
        getFlyer()
        getProducts()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        workItem?.cancel()
    }
    
    @IBOutlet var validDateLabel: UILabel!
    
    var url: String? = nil
    var workItem: DispatchWorkItem?
    
    var refreshControl = UIRefreshControl()
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var productsTableView: UITableView!
    
    var loading: Bool = true
    
    var products: [ProductModel] = []
    
    func getFlyer()
    {
        let request = ShowFlyer.GetFlyer.Request()
        interactor?.getFlyer(request: request)
    }
    
    @objc func getProducts(){
        let request = ShowFlyer.GetProducts.Request()
        interactor?.getProducts(request: request)
    }
    
    func displayFlyer(viewModel: ShowFlyer.GetFlyer.ViewModel.DisplayedFlyer)
    {
        title = viewModel.name
        displayValidDate(dateRange: viewModel.validDate)
        url = viewModel.url
    }
    
    func displayProduct(viewModel: ShowFlyer.GetProducts.ViewModel){
        loading = false
        refreshControl.endRefreshing()
        
        if let error = viewModel.error {
            if viewModel.offline == false {
                showError(title: "Flyer Error", error: error)
            }
        } else {
            products = viewModel.products
            productsTableView.reloadData()
        }
    }
    
    private func displayValidDate(dateRange: String){
        validDateLabel.text = "Valid \(dateRange)"
    }
}

extension ShowFlyerViewController {
    @IBAction func viewPDFButtonPressed(_ sender: Any) {
        openPDF()
    }
    
    private func openPDF(){
        if let url = url {
            hideBarButton()
            
            let pdfView: PDFView = PDFView(frame: view.frame)
            
            self.showPDF(pdfView: pdfView, url: url)
            
            showBarButton()
            
            let viewController = UIViewController()
            viewController.view.addSubview(pdfView)
            self.show(viewController, sender: nil)
        }
    }
    
    private func showPDF(pdfView: PDFView, url: String){
        if let url = URL(string: url) {
            if let pdfDocument = PDFDocument(url: url) {
                pdfView.displayMode = .singlePageContinuous
                pdfView.autoScales = true
                pdfView.document = pdfDocument
            }
        }
    }
}


extension ShowFlyerViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return loading ? 5 : products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureFlyerCell(indexPath: indexPath)
    }
    
    func configureFlyerCell(indexPath: IndexPath) -> ProductCell {
        let cell = productsTableView.dequeueReusableCell(withIdentifier: "ProductCell", for: indexPath) as! ProductCell
        
        cell.product = loading ? nil : products[indexPath.row]
        cell.loading = loading
        
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        return cell
    }
    
    func setupProductsTable(){
        let productCellNib = UINib(nibName: "ProductCell", bundle: nil)
        productsTableView.register(productCellNib, forCellReuseIdentifier: "ProductCell")
        
        productsTableView.delegate = self
        productsTableView.dataSource = self
    }
}
    
extension ShowFlyerViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !loading {
            let product: ProductModel = products[indexPath.row]
            interactor?.setSelectedProduct(product: product)
            router?.routeToShowProduct(segue: nil)
        }
    }
}


extension ShowFlyerViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
    
    func showBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = true
    }
    
    func hideBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = false
    }
}
