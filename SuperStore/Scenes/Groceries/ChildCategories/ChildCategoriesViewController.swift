//
//  ChildCategoriesViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Tabman
import Pageboy

protocol ChildCategoriesDisplayLogic: AnyObject
{
    func displayCategories(viewModel: ChildCategories.GetCategories.ViewModel)
}

class ChildCategoriesViewController: UIViewController, ChildCategoriesDisplayLogic
{

    var interactor: ChildCategoriesBusinessLogic?
    var router: (NSObjectProtocol & ChildCategoriesRoutingLogic & ChildCategoriesDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChildCategoriesInteractor()
        let presenter = ChildCategoriesPresenter()
        let router = ChildCategoriesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayRightBarButton()
        setupCategoriesTableView()
        displayTitle()
        getCategories()
    }
    
    var loading: Bool = true
    
    @IBOutlet var categoriesTableView: UITableView!
    
    var categories: [ChildCategories.GetCategories.ViewModel.DisplayedCategory] = []
    
    func getCategories()
    {
        let request = ChildCategories.GetCategories.Request()
        interactor?.getCategories(request: request)
    }
    
    func displayCategories(viewModel: ChildCategories.GetCategories.ViewModel)
    {
        if let error = viewModel.error {
            if !viewModel.offline {
                showError(title: "Grocery Error", error: error)
            }
        } else {
            loading = false
            categories =  viewModel.displayedCategories
            categoriesTableView.reloadData()
        }
    }
    
    func displayRightBarButton(){
        if interactor?.selectedListID == nil {
            self.navigationItem.rightBarButtonItem = nil
        }
    }
    
    func displayTitle(){
        self.title = interactor!.title
    }

}

extension ChildCategoriesViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return loading ? 7 : categories.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureCategoryCell(indexPath: indexPath)
    }
    
    func configureCategoryCell(indexPath: IndexPath) -> CategoryTableViewCell {
        let cell = categoriesTableView.dequeueReusableCell(withIdentifier: "CategoryTableViewCell", for: indexPath) as! CategoryTableViewCell
        
        cell.nameLabel.text = loading ? nil : categories[indexPath.row].name
        cell.loading = loading
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        return cell
    }
    
    func setupCategoriesTableView(){
        let categoryCellNib = UINib(nibName: "CategoryTableViewCell", bundle: nil)
        categoriesTableView.register(categoryCellNib, forCellReuseIdentifier: "CategoryTableViewCell")
        
        categoriesTableView.delegate = self
        categoriesTableView.dataSource = self
    }
}

extension ChildCategoriesViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !loading {
            // Navigate To Parent Category
            router?.routeToShowProductResults(segue: nil)
        }
    }
}

extension ChildCategoriesViewController {
    @IBAction func doneButtonPressed(_ sender: UIBarButtonItem) {
        router?.routeToShowList(segue: nil)
    }
}
