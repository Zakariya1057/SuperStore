//
//  GroceryTableViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GroceryTableDisplayLogic: class
{
    func displaySomething(viewModel: GroceryTable.Something.ViewModel)
}

class GroceryTableViewController: UITableViewController, GroceryTableDisplayLogic
{
    var interactor: GroceryTableBusinessLogic?
    var router: (NSObjectProtocol & GroceryTableRoutingLogic & GroceryTableDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = GroceryTableInteractor()
        let presenter = GroceryTablePresenter()
        let router = GroceryTableRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupProductsTableView()
        doSomething()
    }
    
    var productPressedCallBack: ((Int) -> Void?)? = nil
    
    var products: [ProductModel] = []
    
    func doSomething()
    {
        let request = GroceryTable.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: GroceryTable.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension GroceryTableViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return products.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureProductCell(indexPath: indexPath)
    }
    
    func configureProductCell(indexPath: IndexPath) -> ProductCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ProductCell", for: indexPath) as! ProductCell
        cell.product = products[indexPath.row]
        cell.configureUI()
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        return cell
    }
    
    func setupProductsTableView(){
        let categoryCellNib = UINib(nibName: "ProductCell", bundle: nil)
        tableView.register(categoryCellNib, forCellReuseIdentifier: "ProductCell")
    }
}

extension GroceryTableViewController {
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let productPressedCallBack = productPressedCallBack {
            productPressedCallBack(products[indexPath.row].id)
        }
    }
}
