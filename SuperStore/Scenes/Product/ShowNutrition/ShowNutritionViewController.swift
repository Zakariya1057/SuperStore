//
//  ShowNutritionViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 20/06/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowNutritionDisplayLogic: AnyObject
{
    func displaySomething(viewModel: ShowNutrition.Something.ViewModel)
}

class ShowNutritionViewController: UIViewController, ShowNutritionDisplayLogic
{
    var interactor: ShowNutritionBusinessLogic?
    var router: (NSObjectProtocol & ShowNutritionRoutingLogic & ShowNutritionDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowNutritionInteractor()
        let presenter = ShowNutritionPresenter()
        let router = ShowNutritionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupTableView()
        getNutritions()
    }
    
    @IBOutlet var nutritionTableView: UITableView!
    
    var nutritions: [NutritionModel] = [
        NutritionModel(name: "", grams: "", percentage: "", childNutritions: [
            ChildNutritionModel(name: "", grams: "", percentage: ""),
            ChildNutritionModel(name: "", grams: "", percentage: ""),
            ChildNutritionModel(name: "", grams: "", percentage: ""),
            ChildNutritionModel(name: "", grams: "", percentage: ""),
        ]),
        NutritionModel(name: "Total Carbohydrate", grams: "", percentage: "10"),
        NutritionModel(name: "Total Carbohydrate", grams: "", percentage: "10"),
        NutritionModel(name: "Total Carbohydrate", grams: "", percentage: ""),
        NutritionModel(name: "", grams: "", percentage: ""),
    ]
    
    func getNutritions()
    {
        let request = ShowNutrition.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: ShowNutrition.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension ShowNutritionViewController: UITableViewDelegate, UITableViewDataSource {
    func setupListSectionView(){
        let nutritionSectionNib = UINib(nibName: "NutrionSectionHeader", bundle: nil)
        nutritionTableView.register(nutritionSectionNib, forHeaderFooterViewReuseIdentifier: "NutrionSectionHeader")
    }
    
    func setupTableView(){
        let nutritionCellNib = UINib(nibName: "NutritionCell", bundle: nil)
        nutritionTableView.register(nutritionCellNib, forCellReuseIdentifier: "NutritionCell")

        nutritionTableView.delegate = self
        nutritionTableView.dataSource = self
        
        setupListSectionView()
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return nutritions.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return nutritions[section].childNutritions.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = nutritionTableView.dequeueReusableCell(withIdentifier: "NutritionCell", for: indexPath) as! NutritionCell
        
        cell.nutrion = nutritions[indexPath.section].childNutritions[indexPath.row]
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        return cell
    }
}

extension ShowNutritionViewController {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let header = nutritionTableView.dequeueReusableHeaderFooterView(withIdentifier: "NutrionSectionHeader") as! NutrionSectionHeader

//        let categoryName = loading ? "" : displayedList!.categories[section].name
//        header.headingLabel.text = categoryName
        
        return header
    }
}
