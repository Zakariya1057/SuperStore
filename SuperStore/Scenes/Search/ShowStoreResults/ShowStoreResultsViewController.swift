//
//  ShowStoreResultsViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import NotificationBannerSwift

protocol ShowStoreResultsDisplayLogic: class
{
    func displayStores(viewModel: ShowStoreResults.GetStores.ViewModel)
}

class ShowStoreResultsViewController: UIViewController, ShowStoreResultsDisplayLogic
{
    var interactor: ShowStoreResultsBusinessLogic?
    var router: (NSObjectProtocol & ShowStoreResultsRoutingLogic & ShowStoreResultsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowStoreResultsInteractor()
        let presenter = ShowStoreResultsPresenter()
        let router = ShowStoreResultsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayRightBarButton()
        setupStoresTableView()
//        getStores()
    }
    
    var fetchingStores: Bool = false
    
    var loading: Bool = true
    
    var latitude: Double? = nil
    var longitude: Double? = nil
    
    var displayedStores: [ShowStoreResults.DisplayedStore] = []
    var stores: [StoreModel] = []
    
    @IBOutlet var mapTableView: UITableView!
    @IBOutlet var storesTableView: UITableView!
    
    func getStores()
    {
        let request = ShowStoreResults.GetStores.Request(latitude: latitude, longitude: longitude)
        interactor?.getStores(request: request)
    }
    
    //MARK: - Display
    
    func displayRightBarButton(){
        if interactor?.selectedListID == nil {
            self.navigationItem.rightBarButtonItem = nil
        }
    }
    
    func displayStores(viewModel: ShowStoreResults.GetStores.ViewModel)
    {
        if let error = viewModel.error {
            
            if !viewModel.offline {
                showError(title: "Store Errors", error: error)
            }
        } else {
            stores = viewModel.stores
            displayedStores = viewModel.displayedStore
            
            loading = false
            
            mapTableView.reloadData()
            storesTableView.reloadData()
        }
    }
}

extension ShowStoreResultsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return loading ? 5 : ( tableView == mapTableView ? 1 : stores.count)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return tableView == storesTableView ? configureStoreResultsCell(indexPath: indexPath) : configureStoreMapCell(indexPath: indexPath)
    }
    
    func configureStoreMapCell(indexPath: IndexPath) -> StoresMapCell {
        let cell = mapTableView.dequeueReusableCell(withIdentifier: "StoresMapCell", for: indexPath) as! StoresMapCell
        
        cell.storeHighlighted = storeMapHighlighted
        cell.storePressed = storePressed
        cell.userLocationFetched = userLocationFetched
        cell.stores = stores
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func configureStoreResultsCell(indexPath: IndexPath) -> StoreResultCell {
        let cell = storesTableView.dequeueReusableCell(withIdentifier: "StoreResultCell", for: indexPath) as! StoreResultCell
        
        cell.loading = loading
        cell.store = loading ? nil : displayedStores[indexPath.row]
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupStoresTableView(){
        let storeResultCellNib = UINib(nibName: "StoreResultCell", bundle: nil)
        storesTableView.register(storeResultCellNib, forCellReuseIdentifier: "StoreResultCell")
        
        let storesMapcellNib = UINib(nibName: "StoresMapCell", bundle: nil)
        mapTableView.register(storesMapcellNib, forCellReuseIdentifier: "StoresMapCell")
        
        storesTableView.delegate = self
        storesTableView.dataSource = self
        
        mapTableView.delegate = self
        mapTableView.dataSource = self
    }
}

extension ShowStoreResultsViewController {
    private func userLocationFetched(location: CLLocationCoordinate2D?){
        if let location = location {
            longitude = Double(location.longitude)
            latitude = Double(location.latitude)
        } else {
            if !fetchingStores {
                let banner = StatusBarNotificationBanner(title: "Please enable user location to see nearby stores.", style: .info)
                banner.dismissOnTap = true
                banner.dismissOnSwipeUp = true
                banner.show()
            }
        }

        if !fetchingStores {
            getStores()
            fetchingStores = true
        }
        
    }
}

extension ShowStoreResultsViewController {
    func storeMapHighlighted(storeID: Int){
        // Find the row with the selected store.
        // Scroll To that Row
        for (index, store) in stores.enumerated() {
            if store.id == storeID {
                storesTableView.scrollToRow(at: IndexPath(row: index, section: 0), at: .top, animated: true)
                break
            }
        }
    }
}

extension ShowStoreResultsViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !loading {
            if tableView == storesTableView {
                let store = stores[indexPath.row]
                storePressed(storeID: store.id)
            }
        }
    }
    
    func storePressed(storeID: Int){
        router?.selectedStoreID = storeID
        router?.routeToStore(segue: nil)
    }
}

extension ShowStoreResultsViewController {
    @IBAction func doneButtonPressed(_ sender: UIBarButtonItem) {
        router?.routeToShowList(segue: nil)
    }
}
