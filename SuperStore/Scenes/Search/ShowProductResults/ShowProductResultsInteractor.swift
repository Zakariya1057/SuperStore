//
//  ShowProductResultsInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowProductResultsBusinessLogic
{
    func getResults(request: ShowProductResults.GetResults.Request)
    
    var productQueryModel: ProductQueryModel { get set }
    var selectedRefineOptions: SelectedRefineOptions { get set }
    var searchRefine: SearchRefine { get set }
    
    var selectedListID: Int? { get set }
    
    func createListItem(request: ShowProductResults.CreateListItem.Request)
    func updateListItem(request: ShowProductResults.UpdateListItem.Request)
}

protocol ShowProductResultsDataStore
{
    var productQueryModel: ProductQueryModel { get set }
    var selectedRefineOptions: SelectedRefineOptions { get set }
    var searchRefine: SearchRefine { get set }
    
    var selectedListID: Int? { get set }
}

class ShowProductResultsInteractor: ShowProductResultsBusinessLogic, ShowProductResultsDataStore
{
    var presenter: ShowProductResultsPresentationLogic?
    
    var searchWorker: SearchWorker = SearchWorker(searchAPI: SearchAPI())
    var listItemWorker: ListItemWorker = ListItemWorker(listItemAPI: ListItemAPI())
    
    var searchRefine: SearchRefine = SearchRefine(brands: [], categories: [])
    var productQueryModel: ProductQueryModel = ProductQueryModel(query: "", type: "")
    
    var selectedListID: Int?
    
    var selectedRefineOptions: SelectedRefineOptions = SelectedRefineOptions() {
        didSet {
            refineResults()
        }
    }
    
    func getResults(request: ShowProductResults.GetResults.Request)
    {
        // Unique Brands. Unique Categories
        var uniqueBrands: [String: Int] = [:]
        var uniqueCategories: [String: Int] = [:]
        
        searchWorker.getProductResults(data: productQueryModel) { (results: ProductResultsModel?, error: String?) in
            
            if let results = results {
                for product in results.products {
                    uniqueBrands[product.brand] = 1
                    uniqueCategories[product.childCategoryName!] = 1
                }
                
                self.searchRefine.brands = uniqueBrands.compactMap{$0.key}
                self.searchRefine.categories = uniqueCategories.compactMap{$0.key}
            }
            
            let response = ShowProductResults.GetResults.Response(products: results?.products ?? [], error: error)
            self.presenter?.presentResults(response: response)
        }
    
    }
    

    func refineResults(){
        
        resetRefineResults()
        
        if let selectedSort = selectedRefineOptions.sort.first {
            productQueryModel.order = selectedSort.order.rawValue
            productQueryModel.sort = selectedSort.type.rawValue
        }
        
        if let selectedCategory = selectedRefineOptions.category.first {
            productQueryModel.childCategory = selectedCategory.name
        }
        
        if let selectedBrand = selectedRefineOptions.brand.first {
            productQueryModel.brand = selectedBrand.name
        }

        productQueryModel.dietary = selectedRefineOptions.dietary.compactMap({ $0.name }).joined(separator: ",")
    }

}

extension ShowProductResultsInteractor {
    func resetRefineResults(){
        productQueryModel.sort = ""
        productQueryModel.order = ""
        productQueryModel.dietary = ""
        productQueryModel.brand = ""
        productQueryModel.childCategory = ""
    }
}

extension ShowProductResultsInteractor {
    func createListItem(request: ShowProductResults.CreateListItem.Request){
        let listID: Int = request.listID
        let productID: Int = request.productID
        let parentCategoryID: Int = request.parentCategoryID
        
        listItemWorker.createItem(listID: listID, productID: productID, parentCategoryID: parentCategoryID) { (error: String?) in
            let response = ShowProductResults.CreateListItem.Response(error: error)
            self.presenter?.presentListItemCreated(response: response)
        }
    }
    
    func updateListItem(request: ShowProductResults.UpdateListItem.Request){
        let listID: Int = request.listID
        let productID: Int = request.productID
        let quantity: Int = request.quantity
        
        listItemWorker.updateItem(listID: listID, productID: productID, quantity: quantity, tickedOff: false) { (error: String?) in
            let response = ShowProductResults.UpdateListItem.Response(error: error)
            self.presenter?.presentListItemUpdated(response: response)
        }
    }
}
