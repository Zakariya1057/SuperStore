//
//  ShowRefineInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowRefineBusinessLogic
{
    func getSelectedOptions(request: ShowRefine.GetSelectedOptions.Request)
    func updateSelectedOptions(request: ShowRefine.UpdatedSelectedOptions.Request)
    func getSearchRefine(request: ShowRefine.GetSearchRefine.Request)
    
    var selectedRefineOptions: SelectedRefineOptions { get set }
    var searchRefine: SearchRefine { get set }
    
    func getStoreTypeID() -> Int
}

protocol ShowRefineDataStore
{
    var selectedRefineOptions: SelectedRefineOptions { get set }
    var searchRefine: SearchRefine { get set }
}

class ShowRefineInteractor: ShowRefineBusinessLogic, ShowRefineDataStore
{
    var presenter: ShowRefinePresentationLogic?
    var worker: ShowRefineWorker?
    var selectedRefineOptions: SelectedRefineOptions = SelectedRefineOptions()
    
    var searchRefine: SearchRefine = SearchRefine(availabilityType: [], brands: [], productGroups: [], promotions: [])
    
    func getSelectedOptions(request: ShowRefine.GetSelectedOptions.Request)
    {
        let response = ShowRefine.GetSelectedOptions.Response(selectedRefineOptions: selectedRefineOptions)
        presenter?.presentSelectedOptions(response: response)
    }
    
    func getSearchRefine(request: ShowRefine.GetSearchRefine.Request) {
        let response = ShowRefine.GetSearchRefine.Response(searchRefine: searchRefine)
        presenter?.presentSearchRefine(response: response)
    }
    
    func updateSelectedOptions(request: ShowRefine.UpdatedSelectedOptions.Request){
        // Update selected options.
        let option = request.option
        let checked: Bool = option.checked
        
        switch option {
        
        case is RefineAvailabilityTypeOptionModel:
            selectedRefineOptions.availabilityType = checked ? [option as! RefineAvailabilityTypeOptionModel] : []
            
        case is RefineProductGroupOptionModel:
            selectedRefineOptions.productGroup = checked ? [option as! RefineProductGroupOptionModel] : []
            
        case is RefinePromotionOptionModel:
            selectedRefineOptions.promotion = checked ? [option as! RefinePromotionOptionModel] : []
            
        case is RefineDietaryOptionModel:
            // Multiple Dietary Options
            
            if option.checked {
                selectedRefineOptions.dietary.append(option as! RefineDietaryOptionModel)
            } else {
                // Remove from selected list
                for (index, refineOption) in selectedRefineOptions.dietary.enumerated() {
                    if refineOption == option {
                        selectedRefineOptions.dietary.remove(at: index)
                        break
                    }
                }
            }
            
            
        case is RefineBrandOptionModel:
            selectedRefineOptions.brand = checked ? [option as! RefineBrandOptionModel] : []
            
        default:
            break
            
        }
        
    }
}

extension ShowRefineInteractor {
    func getStoreTypeID() -> Int {
        let userSession: UserSessionWorker = UserSessionWorker()
        return userSession.getStore()
    }
}
