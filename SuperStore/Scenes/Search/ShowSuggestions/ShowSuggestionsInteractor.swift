//
//  ShowSuggestionsInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowSuggestionsBusinessLogic
{
    func getSuggestions(request: ShowSuggestions.GetSuggestions.Request)
    func getRecentSuggestions(request: ShowSuggestions.GetRecentSuggestions.Request)
    
    func suggestionSelected(suggestion: SuggestionModel)
    
    var productQueryModel: ProductQueryModel? { get set }
    var selectedListID: Int? { get set }
}

protocol ShowSuggestionsDataStore
{
    var productQueryModel: ProductQueryModel? { get set }
    var selectedListID: Int? { get set }
}

class ShowSuggestionsInteractor: ShowSuggestionsBusinessLogic, ShowSuggestionsDataStore
{
    var presenter: ShowSuggestionsPresentationLogic?
    var searchWorker: SearchWorker = SearchWorker(searchAPI: SearchAPI())
    
    var productQueryModel: ProductQueryModel? = nil
    
    var selectedListID: Int?
    
    var userSession = UserSessionWorker()
    var storeTypeID: Int {
        return userSession.getStore()
    }
   
    
    func getSuggestions(request: ShowSuggestions.GetSuggestions.Request)
    {
        searchWorker.getSuggestions(storeTypeID: storeTypeID, query: request.query) { (suggestions: [SuggestionModel], error: String?) in
            let response = ShowSuggestions.GetSuggestions.Response(suggestions: suggestions, error: error)
            self.presenter?.presentSuggestions(response: response)
        }
    }
    
    func getRecentSuggestions(request: ShowSuggestions.GetRecentSuggestions.Request){
        searchWorker.getRecentSuggestions(storeTypeID: storeTypeID, limit: request.limit) { (suggestions: [SuggestionModel], error: String?) in
            let response = ShowSuggestions.GetRecentSuggestions.Response(suggestions: suggestions, error: error)
            self.presenter?.presentRecentSuggestions(response: response)
        }
    }
}

extension ShowSuggestionsInteractor {
    func suggestionSelected(suggestion: SuggestionModel){
        var type: String = ""
        
        if suggestion.type == .product {
            type = "products"
        } else if suggestion.type == .childCategory {
            type = "child_categories"
        } else {
            type = "parent_categories"
        }
        
        productQueryModel = ProductQueryModel(storeTypeID: storeTypeID, query: suggestion.name, type: type)
        
        searchWorker.suggestionSelected(suggestion: suggestion)
    }
}
