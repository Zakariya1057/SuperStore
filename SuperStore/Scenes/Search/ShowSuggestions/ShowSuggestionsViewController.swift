//
//  ShowSuggestionsViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 02/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowSuggestionsDisplayLogic: class
{
    func displaySuggestions(viewModel: ShowSuggestions.GetSuggestions.ViewModel)
}

class ShowSuggestionsViewController: UIViewController, ShowSuggestionsDisplayLogic
{
    var interactor: ShowSuggestionsBusinessLogic?
    var router: (NSObjectProtocol & ShowSuggestionsRoutingLogic & ShowSuggestionsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowSuggestionsInteractor()
        let presenter = ShowSuggestionsPresenter()
        let router = ShowSuggestionsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayRightBarButton()
        setupFavouriteTableView()
        setupSearchDelegate()
    }
    
    @IBOutlet var suggestionsTableView: UITableView!
    @IBOutlet var searchBar: UISearchBar!
    
    var suggestions: [SuggestionModel] = [
        // Load Later.
        SuggestionModel(id: 1, name: "Asda", type: .store),
        SuggestionModel(id: 1, name: "Fruit", type: .parentCategory),
        SuggestionModel(id: 1, name: "Apples", type: .childCategory),
    ]
    
    private func search(){
        let searchText = searchBar.text ?? ""
        
        if searchText.replacingOccurrences(of: " ", with: "") == "" {
            suggestions = []
            suggestionsTableView.reloadData()
        } else {
            let request = ShowSuggestions.GetSuggestions.Request(query: searchText)
            interactor?.getSuggestions(request: request)
        }
    }
    
    func displaySuggestions(viewModel: ShowSuggestions.GetSuggestions.ViewModel)
    {
        if let error = viewModel.error {
            showError(title: "Search Error", error: error)
        } else {
            self.suggestions = viewModel.suggestions
            
            suggestionsTableView.reloadData()
        }
    }
    
    func displayRightBarButton(){
        if interactor?.selectedListID == nil {
            self.navigationItem.rightBarButtonItem = nil
        }
    }
}

extension ShowSuggestionsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return suggestions.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureSuggestionCell(indexPath: indexPath)
    }
    
    func configureSuggestionCell(indexPath: IndexPath) -> SearchSuggestionCell {
        let cell = suggestionsTableView.dequeueReusableCell(withIdentifier: "SearchSuggestionCell", for: indexPath) as! SearchSuggestionCell
        
        cell.suggestion = suggestions[indexPath.row]
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupFavouriteTableView(){
        let suggestionCellNib = UINib(nibName: "SearchSuggestionCell", bundle: nil)
        suggestionsTableView.register(suggestionCellNib, forCellReuseIdentifier: "SearchSuggestionCell")
        
        suggestionsTableView.delegate = self
        suggestionsTableView.dataSource = self
    }
}

extension ShowSuggestionsViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let suggestion: SuggestionModel = suggestions[indexPath.row]
        var type: String
        
        if suggestion.type == .store {
            router?.selectedStoreTypeID = suggestion.id
            router?.routeToShowStoreResults(segue: nil)
        } else {
            if suggestion.type == .product {
                type = "products"
            } else if suggestion.type == .childCategory {
                type = "child_categories"
            } else {
                type = "parent_categories"
            }
            
            interactor?.productQueryModel = ProductQueryModel(query: suggestion.name, type: type)
            router?.routeToShowProductResults(segue: nil)
        }

    }
}

extension ShowSuggestionsViewController: UISearchBarDelegate {
    
    private func setupSearchDelegate(){
        searchBar.delegate = self
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        search()
    }

    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        search()
    }
}

extension ShowSuggestionsViewController {
    @IBAction func doneButtonPressed(_ sender: UIBarButtonItem) {
        router?.routeToShowList(segue: nil)
    }
}
