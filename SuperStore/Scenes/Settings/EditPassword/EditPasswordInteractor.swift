//
//  EditPasswordInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditPasswordBusinessLogic
{
    func updatePassword(request: EditPassword.UpdatePassword.Request)
}

protocol EditPasswordDataStore
{

}

class EditPasswordInteractor: EditPasswordBusinessLogic, EditPasswordDataStore
{
    var presenter: EditPasswordPresentationLogic?
    var userWorker: UserSettingsWorker = UserSettingsWorker(userStore: UserRealmStore())
    var validationWorker: UserValidationWorker = UserValidationWorker()
    
    // MARK: Do something
    
    func updatePassword(request: EditPassword.UpdatePassword.Request)
    {
        
        let newPassword = request.newPassword
        let confirmPassword = request.confirmPassword
        let currentPassword = request.currentPassword
        
        let formFields: [UserFormField] = [
            UserFormField(name: "Current Password", value: currentPassword, type: .password),
            UserFormField(name: "New Password", value: newPassword, type: .password),
            UserFormField(name: "Confirm Password", value: confirmPassword, type: .password),
            UserPasswordMatch(name: "Password Match", value: newPassword, type: .confirm, repeatValue: confirmPassword)
        ]
        
        let error = validationWorker.validateFields(formFields)
        
        if let error = error {
            let response = EditPassword.UpdatePassword.Response(error: error)
            self.presenter?.presentPasswordUpdated(response: response)
        } else {
            userWorker.updatePassword(currentPassword: currentPassword, newPassword: newPassword, confirmPassword: confirmPassword) { (error: String?) in
                let response = EditPassword.UpdatePassword.Response(error: error)
                self.presenter?.presentPasswordUpdated(response: response)
            }
        }
    }
}
