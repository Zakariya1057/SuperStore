//
//  SettingsPresenter.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsPresentationLogic
{
    func presentUserDetails(response: Settings.GetUserDetails.Response)
    func presentUpdateNotifications(response: Settings.UpdateNotifications.Response)
    func presentLogout(response: Settings.Logout.Response)
    func presentDeleted(response: Settings.Delete.Response)
}

class SettingsPresenter: SettingsPresentationLogic
{
    weak var viewController: SettingsDisplayLogic?
    
    // MARK: Do something
    
    func presentUserDetails(response: Settings.GetUserDetails.Response)
    {
        
        var displayedUser: Settings.GetUserDetails.ViewModel.DisplayedUser?
        var error: String?
        
        if let user = response.user {
            displayedUser = Settings.GetUserDetails.ViewModel.DisplayedUser(
                name: user.name, email: user.email, storeTypeID: user.storeTypeID, sendNotifications: user.sendNotifications
            )
        } else {
            error = "Failed to find saved user details."
        }
        
        let viewModel = Settings.GetUserDetails.ViewModel(displayedUser: displayedUser, error: error)
        viewController?.displayUserDetails(viewModel: viewModel)
    }
    
    func presentUpdateNotifications(response: Settings.UpdateNotifications.Response) {
        let viewModel = Settings.UpdateNotifications.ViewModel(error: response.error)
        viewController?.displayUpdateNotifications(viewModel: viewModel)
    }
    
    func presentLogout(response: Settings.Logout.Response) {
        let viewModel = Settings.Logout.ViewModel(error: response.error)
        viewController?.displayedLogout(viewModel: viewModel)
    }
    
    func presentDeleted(response: Settings.Delete.Response) {
        let viewModel = Settings.Delete.ViewModel(error: response.error)
        viewController?.displayedDeleted(viewModel: viewModel)
    }
}
