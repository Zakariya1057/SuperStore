//
//  SettingsViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: AnyObject
{
    func displayUserStore(viewModel: Settings.GetStore.ViewModel)
    func displayUserDetails(viewModel: Settings.GetUserDetails.ViewModel)
    func displayUpdateNotifications(viewModel: Settings.UpdateNotifications.ViewModel)
    func displayedLogout(viewModel: Settings.Logout.ViewModel)
    func displayedDeleted(viewModel: Settings.Delete.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic
{

    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupUserFieldGesture()
        getSettings()
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var loggedInView: UIView!
    @IBOutlet var loggedOutView: UIView!
    
    @IBOutlet weak var usernameStackView: UIStackView!
    @IBOutlet weak var emailStackView: UIStackView!
    @IBOutlet weak var passwordStackView: UIStackView!
    
    @IBOutlet var storeLoggedInStackView: UIStackView!
    @IBOutlet var storeLoggedOutStackView: UIStackView!
    
    @IBOutlet var logoutStackView: UIStackView!
    
    @IBOutlet var storeLoggedInNameLabel: UILabel!
    @IBOutlet var storeLoggedOutNameLabel: UILabel!
    
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var emailLabel: UILabel!
    
    @IBOutlet var notificationSwitch: UISwitch!

    var userSession: UserSessionWorker = UserSessionWorker()
    var loggedIn: Bool {
        return userSession.isLoggedIn()
    }
    
    func getSettings()
    {
        if loggedIn {
            let request = Settings.GetUserDetails.Request()
            interactor?.getSettings(request: request)
        } else {
            // Get User Store. Show Store
            displayUserViews(loggedIn: false)
            getUserStore()
        }
    }
    
    func displayUserDetails(viewModel: Settings.GetUserDetails.ViewModel)
    {
        if viewModel.error != nil {
            // User not logged in.
            displayUserViews(loggedIn: false)
            getUserStore()
        } else {
            if let user = viewModel.displayedUser {
                
                displayUserViews(loggedIn: true)
                
                nameLabel.text = user.name
                emailLabel.text = user.email
                storeLoggedInNameLabel!.text = user.storeName
                
                notificationSwitch.isOn = user.sendNotifications
            }
        }
    }
    
    func getUserStore(){
        let request = Settings.GetStore.Request()
        interactor?.getUserStore(request: request)
    }
    
    func displayUserStore(viewModel: Settings.GetStore.ViewModel) {
        storeLoggedOutNameLabel!.text = viewModel.storeName
    }
    
    func displayedLogout(viewModel: Settings.Logout.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Logout Error", error: error)
        } else {
            getSettings()
        }
    }
    
    func displayedDeleted(viewModel: Settings.Delete.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Delete Error", error: error)
        } else {
            getSettings()
        }
    }
    
    func displayUpdateNotifications(viewModel: Settings.UpdateNotifications.ViewModel) {
        if let error = viewModel.error {
            showError(title: "Settings Error", error: error)
        }
    }
}

extension SettingsViewController {
    func displayUserViews(loggedIn: Bool){
        if loggedIn {
            showRightBarButton()
            loggedInView.isHidden = false
            loggedOutView.isHidden = true
        } else {
            hideRightBarButton()
            loggedInView.isHidden = true
            loggedOutView.isHidden = false
        }
    }
}

extension SettingsViewController {
    @IBAction func deleteButtonPressed(_ sender: Any) {
       
        let refreshAlert = UIAlertController(title: "Delete Account", message: "Are you sure you want to delete your account. All your data will be permanently lost.", preferredStyle: UIAlertController.Style.alert)

        refreshAlert.addAction(UIAlertAction(title: "Yes, delete", style: .default, handler: { (action: UIAlertAction!) in
            self.startLoading()
            
            let request = Settings.Delete.Request()
            self.interactor?.delete(request: request)
        }))

        refreshAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
              print("Cancel Delete")
        }))

        present(refreshAlert, animated: true, completion: nil)
    }
    
    @IBAction func notificationSwitchPressed(_ sender: Any) {
        let sendNotifications = notificationSwitch.isOn
        
        if sendNotifications {
            var errorMessage: String? = nil
            
            let center = UNUserNotificationCenter.current()
            center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
                // Enable or disable features based on the authorization.
                if !granted {
                    errorMessage = "Please enable notifications from your apple settings."
                } else if let error = error {
                    errorMessage = error.localizedDescription
                }
                
                DispatchQueue.main.async {
                    if let errorMessage = errorMessage {
                        self.notificationSwitch.setOn(false, animated: true)
                        self.showError(title: "Notification Error", error: errorMessage)
                    } else {
                        let request = Settings.UpdateNotifications.Request(sendNotifications: sendNotifications)
                        self.interactor?.updateNotification(request: request)
                    }
                }

            }

        }

    }
    
}

extension SettingsViewController {
    func setupUserFieldGesture(){
        let usernanmeGesture = UITapGestureRecognizer(target: self, action: #selector(namePressed))
        usernameStackView.addGestureRecognizer(usernanmeGesture)
        
        let emailGesture = UITapGestureRecognizer(target: self, action: #selector(emailPressed))
        emailStackView.addGestureRecognizer(emailGesture)
        
        let passwordGesture = UITapGestureRecognizer(target: self, action: #selector(passwordPressed))
        passwordStackView.addGestureRecognizer(passwordGesture)
        
        let storeGestureLoggedIn = UITapGestureRecognizer(target: self, action: #selector(storePressed))
        let storeGestureLoggedOut = UITapGestureRecognizer(target: self, action: #selector(storePressed))
        
        storeLoggedOutStackView.addGestureRecognizer(storeGestureLoggedOut)
        storeLoggedInStackView.addGestureRecognizer(storeGestureLoggedIn)
        
        let logoutGesture = UITapGestureRecognizer(target: self, action: #selector(logoutPressed))
        logoutStackView.addGestureRecognizer(logoutGesture)
    }
}

extension SettingsViewController {
    func showRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = true
    }

    func hideRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = false
    }
}


extension SettingsViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}

extension SettingsViewController {
    @objc func namePressed(){
        router?.routeToEditName(segue: nil)
    }
    
    @objc func emailPressed(){
        router?.routeToEditEmail(segue: nil)
    }
    
    @objc func passwordPressed(){
        router?.routeToEditPassword(segue: nil)
    }
    
    @objc func storePressed(){
        router?.routeToEditStore(segue: nil)
    }
    
    @objc func logoutPressed(){
        let refreshAlert = UIAlertController(title: "Logout", message: "Are you sure you want to logout? Your data won't be lost.", preferredStyle: UIAlertController.Style.alert)

        refreshAlert.addAction(UIAlertAction(title: "Yes, logout", style: .default, handler: { (action: UIAlertAction!) in
            self.startLoading()
            let request = Settings.Logout.Request()
            self.interactor?.logout(request: request)
        }))

        refreshAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
              print("Cancel Delete")
        }))
        
        present(refreshAlert, animated: true, completion: nil)
    }
}

extension SettingsViewController: UserLoggedInProtocol {
    @IBAction func loginButtonPressed(_ sender: UIButton) {
        router?.routeToLogin(segue: nil)
    }
    
    func userLoggedInSuccessfully(){
        getSettings()
    }
}
