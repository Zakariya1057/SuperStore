//
//  SettingsViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingsDisplayLogic: class
{
    func displayUserDetails(viewModel: Settings.GetUserDetails.ViewModel)
    func displayUpdateNotifications(viewModel: Settings.UpdateNotifications.ViewModel)
    func displayedLogout(viewModel: Settings.Logout.ViewModel)
    func displayedDeleted(viewModel: Settings.Delete.ViewModel)
}

class SettingsViewController: UIViewController, SettingsDisplayLogic
{

    var interactor: SettingsBusinessLogic?
    var router: (NSObjectProtocol & SettingsRoutingLogic & SettingsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SettingsInteractor()
        let presenter = SettingsPresenter()
        let router = SettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupUserFieldGesture()
        getSettings()
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var loggedInView: UIView!
    @IBOutlet var loggedOutView: UIView!
    
    @IBOutlet weak var usernameStackView: UIStackView!
    @IBOutlet weak var emailStackView: UIStackView!
    @IBOutlet weak var passwordStackView: UIStackView!
    
    @IBOutlet var storeLoggedInStackView: UIStackView!
    @IBOutlet var storeLoggedOutStackView: UIStackView!
    
    @IBOutlet var storeLoggedInNameLabel: UILabel!
    @IBOutlet var storeLoggedOutNameLabel: UILabel!
    
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var emailLabel: UILabel!
    
    @IBOutlet var notificationSwitch: UISwitch!
    
    @IBOutlet var logoutButton: UIButton!
    
    var storeDetails: [Int: String] = [
        1: "Asda",
        2: "Real Canadian Superstore"
    ]
    
    func getSettings()
    {
        let request = Settings.GetUserDetails.Request()
        interactor?.getSettings(request: request)
    }
    
    func displayUserDetails(viewModel: Settings.GetUserDetails.ViewModel)
    {
        if viewModel.error != nil {
            // User not logged in.
            displayUserLoggedIn(loggedIn: false)
        } else {
            if let user = viewModel.displayedUser {
                
                displayUserLoggedIn(loggedIn: true)
                
                nameLabel.text = user.name
                emailLabel.text = user.email
                
                let storeName: String = storeDetails[user.storeTypeID]!
                
                for storeLabel in [storeLoggedInNameLabel, storeLoggedOutNameLabel] {
                    storeLabel!.text = storeName
                }
                
                notificationSwitch.isOn = user.sendNotifications
            }
        }
    }
    
    func displayedLogout(viewModel: Settings.Logout.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Logout Error", error: error)
        } else {
            getSettings()
        }
    }
    
    func displayedDeleted(viewModel: Settings.Delete.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Delete Error", error: error)
        } else {
            getSettings()
        }
    }
    
    func displayUpdateNotifications(viewModel: Settings.UpdateNotifications.ViewModel) {
        if let error = viewModel.error {
            showError(title: "Settings Error", error: error)
        }
    }
}

extension SettingsViewController {
    func displayUserLoggedIn(loggedIn: Bool){
        if loggedIn {
            loggedInView.isHidden = false
            logoutButton.isHidden = false
            
            loggedOutView.isHidden = true
        } else {
            loggedInView.isHidden = true
            logoutButton.isHidden = true
            
            loggedOutView.isHidden = false
        }
    }
}

extension SettingsViewController {
    @IBAction func deleteButtonPressed(_ sender: Any) {
        startLoading()
        
        let request = Settings.Delete.Request()
        interactor?.delete(request: request)
    }
    
    @IBAction func notificationSwitchPressed(_ sender: Any) {
        let sendNotifications = notificationSwitch.isOn
        let request = Settings.UpdateNotifications.Request(sendNotifications: sendNotifications)
        interactor?.updateNotification(request: request)
    }
    
    @IBAction func logoutButtonPressed(_ sender: Any) {
        startLoading()
        
        let request = Settings.Logout.Request()
        interactor?.logout(request: request)
    }
}

extension SettingsViewController {
    func setupUserFieldGesture(){
        let usernanmeGesture = UITapGestureRecognizer(target: self, action: #selector(namePressed))
        usernameStackView.addGestureRecognizer(usernanmeGesture)
        
        let emailGesture = UITapGestureRecognizer(target: self, action: #selector(emailPressed))
        emailStackView.addGestureRecognizer(emailGesture)
        
        let passwordGesture = UITapGestureRecognizer(target: self, action: #selector(passwordPressed))
        passwordStackView.addGestureRecognizer(passwordGesture)
        
        let storeGestureLoggedIn = UITapGestureRecognizer(target: self, action: #selector(storePressed))
        let storeGestureLoggedOut = UITapGestureRecognizer(target: self, action: #selector(storePressed))
        
        storeLoggedOutStackView.addGestureRecognizer(storeGestureLoggedOut)
        storeLoggedInStackView.addGestureRecognizer(storeGestureLoggedIn)
    }
}

extension SettingsViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}

extension SettingsViewController {
    @objc func namePressed(){
        router?.routeToEditName(segue: nil)
    }
    
    @objc func emailPressed(){
        router?.routeToEditEmail(segue: nil)
    }
    
    @objc func passwordPressed(){
        router?.routeToEditPassword(segue: nil)
    }
    
    @objc func storePressed(){
        print("Store Pressed")
        router?.routeToEditStore(segue: nil)
    }
}

extension SettingsViewController: UserLoggedInProtocol {
    @IBAction func loginButtonPressed(_ sender: UIButton) {
        router?.routeToLogin(segue: nil)
    }
    
    func userLoggedInSuccessfully(){
        getSettings()
    }
}
