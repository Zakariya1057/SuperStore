//
//  HelpAndFeedbackViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 07/06/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HelpAndFeedbackDisplayLogic: AnyObject
{
    func displaySettings(viewModel: HelpAndFeedback.GetSettings.ViewModel)
}

class HelpAndFeedbackViewController: UIViewController, HelpAndFeedbackDisplayLogic
{
    var interactor: HelpAndFeedbackBusinessLogic?
    var router: (NSObjectProtocol & HelpAndFeedbackRoutingLogic & HelpAndFeedbackDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HelpAndFeedbackInteractor()
        let presenter = HelpAndFeedbackPresenter()
        let router = HelpAndFeedbackRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        setupNotificationObserver()
        setupTableView()
        getSettings()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        removeNotificationObserver()
    }
    
    var displaySections: [HelpAndFeedback.DisplaySection] = []
    
    @IBOutlet var tableView: UITableView!
    
    func getSettings()
    {
        let request = HelpAndFeedback.GetSettings.Request()
        interactor?.getSettings(request: request)
    }
    
    func displaySettings(viewModel: HelpAndFeedback.GetSettings.ViewModel) {
        displaySections = viewModel.displaySections
        tableView.reloadData()
    }
}

extension HelpAndFeedbackViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return displaySections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displaySections[section].settings.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureSettingCell(indexPath: indexPath)
    }
    
    func configureSettingCell(indexPath: IndexPath) -> SettingCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SettingCell", for: indexPath) as! SettingCell
        
        let setting = displaySections[indexPath.section].settings[indexPath.row]
        
        cell.setting = setting
        
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupTableView(){
        let settingCellNib = UINib(nibName: "SettingCell", bundle: nil)
        tableView.register(settingCellNib, forCellReuseIdentifier: "SettingCell")
        
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView()
        view.backgroundColor = UIColor(named: "Grey.Clear")
        return view
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return section == 0 ? 0 : 40
    }
}
    
extension HelpAndFeedbackViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let setting: SettingModel = displaySections[indexPath.section].settings[indexPath.row]
        interactor?.setFeedbackTitle(setting: setting)
        router?.routeToFeedback(segue: nil)
    }
}

extension HelpAndFeedbackViewController {
    func setupNotificationObserver(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(messageNotificationReceived(_:)),
            name: NSNotification.Name(rawValue: "messageNotificationReceived"),
            object: nil
        )
    }

    func removeNotificationObserver(){
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: "messageNotificationReceived"), object: nil)
    }

    @objc func messageNotificationReceived(_ notification:Notification) {
        getSettings()
    }
}
