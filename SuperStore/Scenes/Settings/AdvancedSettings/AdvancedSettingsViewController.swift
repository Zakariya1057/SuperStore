//
//  AdvancedSettingsViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 07/06/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AdvancedSettingsDisplayLogic: AnyObject
{
    func displaySettings(viewModel: AdvancedSettings.GetSettings.ViewModel)
    func displayedDeleted(viewModel: AdvancedSettings.Delete.ViewModel)
}

class AdvancedSettingsViewController: UIViewController, AdvancedSettingsDisplayLogic
{
    var interactor: AdvancedSettingsBusinessLogic?
    var router: (NSObjectProtocol & AdvancedSettingsRoutingLogic & AdvancedSettingsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AdvancedSettingsInteractor()
        let presenter = AdvancedSettingsPresenter()
        let router = AdvancedSettingsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        setupNotificationObserver()
        setupTableView()
        getSettings()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        removeNotificationObserver()
    }
    
    var displaySections: [AdvancedSettings.DisplaySection] = []
    
    @IBOutlet var tableView: UITableView!
    
    func getSettings()
    {
        let request = AdvancedSettings.GetSettings.Request()
        interactor?.getSettings(request: request)
    }
    
    func displaySettings(viewModel: AdvancedSettings.GetSettings.ViewModel) {
        title = viewModel.parentSetting.name
        displaySections = viewModel.displaySections
        tableView.reloadData()
    }
    
    func displayedDeleted(viewModel: AdvancedSettings.Delete.ViewModel) {
        stopLoading()
        
        if let error = viewModel.error {
            showError(title: "Delete Error", error: error)
        } else {
            router?.routeToSettings(segue: nil)
        }
    }
}

extension AdvancedSettingsViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return displaySections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displaySections[section].settings.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureSettingCell(indexPath: indexPath)
    }
    
    func configureSettingCell(indexPath: IndexPath) -> SettingCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SettingCell", for: indexPath) as! SettingCell
        
        let setting = displaySections[indexPath.section].settings[indexPath.row]
        
        cell.setting = setting
        
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupTableView(){
        let settingCellNib = UINib(nibName: "SettingCell", bundle: nil)
        tableView.register(settingCellNib, forCellReuseIdentifier: "SettingCell")
        
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView()
        view.backgroundColor = UIColor(named: "Grey.Clear")
        return view
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return section == 0 ? 0 : 40
    }
}
    
extension AdvancedSettingsViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let setting: SettingModel = displaySections[indexPath.section].settings[indexPath.row]
        settingPressed(setting: setting)
    }
}

extension AdvancedSettingsViewController {
    func settingPressed(setting: SettingModel){
        switch setting.type {
        
        case .name:
            namePressed()
            
        case .email:
            emailPressed()
            
        case .password:
            passwordPressed()
            
        case .delete:
            deleteAccount()
            
        case .region:
            regionPressed()
            
        case .store:
            storePressed()
            
        case .feedback, .help, .issue, .feature:
            helpAndFeedbackPressed(setting: setting)
            
        default:
            print("Unknown Setting Type Pressed: \(type(of: setting.type))")
            
        }
    }
}

extension AdvancedSettingsViewController {
    func namePressed(){
        router?.routeToEditName(segue: nil)
    }
    
    func emailPressed(){
        router?.routeToEditEmail(segue: nil)
    }
    
    func passwordPressed(){
        router?.routeToEditPassword(segue: nil)
    }
    
    func regionPressed(){
        router?.routeToEditRegion(segue: nil)
    }
    
    func storePressed(){
        router?.routeToEditStore(segue: nil)
    }
    
    func helpAndFeedbackPressed(setting: SettingModel){
        interactor?.setFeedbackTitle(setting: setting)
        router?.routeToFeedback(segue: nil)
    }
}


extension AdvancedSettingsViewController {
    private func deleteAccount(){
        let refreshAlert = UIAlertController(title: "Delete Account", message: "Are you sure you want to delete your account. All your data will be permanently lost.", preferredStyle: UIAlertController.Style.alert)
        
        refreshAlert.addAction(UIAlertAction(title: "Yes, delete", style: .default, handler: { (action: UIAlertAction!) in
            self.startLoading()
            
            let request = AdvancedSettings.Delete.Request()
            self.interactor?.delete(request: request)
        }))
        
        refreshAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
            print("Cancel Delete")
        }))
        
        present(refreshAlert, animated: true, completion: nil)
    }
}

extension AdvancedSettingsViewController {
    func setupNotificationObserver(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(messageNotificationReceived(_:)),
            name: NSNotification.Name(rawValue: "messageNotificationReceived"),
            object: nil
        )
    }

    func removeNotificationObserver(){
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: "messageNotificationReceived"), object: nil)
    }

    @objc func messageNotificationReceived(_ notification:Notification) {
        getSettings()
    }
}

extension AdvancedSettingsViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}
