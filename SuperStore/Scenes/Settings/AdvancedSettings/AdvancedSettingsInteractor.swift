//
//  AdvancedSettingsInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 07/06/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AdvancedSettingsBusinessLogic
{
    func setFeedbackTitle(setting: SettingModel)
    func getSettings(request: AdvancedSettings.GetSettings.Request)
    
    func updateNotification(request: AdvancedSettings.UpdateNotifications.Request)
    func clearSearchCache(request: AdvancedSettings.ClearSearchCache.Request)
    func delete(request: AdvancedSettings.Delete.Request)
}

protocol AdvancedSettingsDataStore
{
    var parentSetting: SettingModel! { get set }
    var selectedSetting: SettingModel! { get set }
    
    var user: UserModel? { get set }
}

class AdvancedSettingsInteractor: AdvancedSettingsBusinessLogic, AdvancedSettingsDataStore
{
    var presenter: AdvancedSettingsPresentationLogic?
    
    var userWorker: UserSettingsWorker = UserSettingsWorker(userStore: UserRealmStore())
    
    var userSession: UserSessionWorker = UserSessionWorker()
    var messageWorker: MessageWorker = MessageWorker(messageAPI: MessageAPI())
    
    var supermarketChainWorker: SupermarketChainWorker = SupermarketChainWorker()
    var regionWorker: RegionWorker = RegionWorker()
    
    var searchWorker: SearchWorker = SearchWorker(searchAPI: SearchAPI())
    
    var parentSetting: SettingModel!
    var selectedSetting: SettingModel!
    
    var user: UserModel?
    
    func getSettings(request: AdvancedSettings.GetSettings.Request)
    {
        userWorker.getUser { (user: UserModel?) in
            
            self.user = user
            
            let unreadHelpMessages: Int     = self.messageWorker.getUnreadMessagesCountByType(type: .help)
            let unreadFeaturepMessages: Int = self.messageWorker.getUnreadMessagesCountByType(type: .feature)
            let unreadFeedbackMessages: Int = self.messageWorker.getUnreadMessagesCountByType(type: .feedback)
            let unreadIssueMessages: Int    = self.messageWorker.getUnreadMessagesCountByType(type: .issue)
            
            let supermarketChainName: String = self.supermarketChainWorker.getSupermarketChainName(supermarketChainID: user!.supermarketChainID)
            let regionName: String = self.regionWorker.getRegionName(regionID: user!.regionID)
            
            let loggedIn: Bool =  self.userSession.isLoggedIn()
            
            let response = AdvancedSettings.GetSettings.Response(
                parentSetting: self.parentSetting,
                
                user: user,
                
                supermarketChainName: supermarketChainName,
                regionName: regionName,
            
                unreadHelpMessages: unreadHelpMessages,
                unreadFeaturepMessages: unreadFeaturepMessages,
                unreadIssueMessages: unreadIssueMessages,
                unreadFeedbackMessages: unreadFeedbackMessages,
                
                loggedIn: loggedIn
            )
            
            self.presenter?.presentSettings(response: response)
        }
        
    }
    
    func setFeedbackTitle(setting: SettingModel){
        self.selectedSetting = setting
    }
}

extension AdvancedSettingsInteractor {
    func delete(request: AdvancedSettings.Delete.Request) {
        userWorker.deleteUser { (error: String?) in
            let response = AdvancedSettings.Delete.Response(error: error)
            self.presenter?.presentDeleted(response: response)
        }
    }
    
    func updateNotification(request: AdvancedSettings.UpdateNotifications.Request){
        let sendNotification: Bool = request.sendNotifications
        let notificationToken: String? = userSession.getUserNotificationToken()
        
        userWorker.updateNotifications(sendNotifications: sendNotification, notificationToken: notificationToken) { (error: String?) in
            let response = AdvancedSettings.UpdateNotifications.Response(error: error)
            self.presenter?.presentUpdateNotifications(response: response)
        }
    }
}

extension AdvancedSettingsInteractor {
    func clearSearchCache(request: AdvancedSettings.ClearSearchCache.Request){
        searchWorker.clearSearchCache()
        
        let response = AdvancedSettings.ClearSearchCache.Response(error: nil)
        self.presenter?.presentSearchCache(response: response)
    }
}
