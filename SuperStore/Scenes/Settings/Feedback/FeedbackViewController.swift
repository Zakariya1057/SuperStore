//
//  FeedbackViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 06/05/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SCLAlertView

protocol FeedbackDisplayLogic: AnyObject
{
    func displayTitle(viewModel: Feedback.GetTitle.ViewModel)
    
    func displaySendFeedback(viewModel: Feedback.SendFeedback.ViewModel)
    func displaySendMessage(viewModel: Feedback.SendMessage.ViewModel)
    
    func displayMessages(viewModel: Feedback.GetMessages.ViewModel)
}

class FeedbackViewController: UIViewController, FeedbackDisplayLogic
{
    
    var interactor: FeedbackBusinessLogic?
    var router: (NSObjectProtocol & FeedbackRoutingLogic & FeedbackDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FeedbackInteractor()
        let presenter = FeedbackPresenter()
        let router = FeedbackRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        displayViews()
        
        setupNotificationObserver()
        
        if loggedIn {
            getMessages()
        }
    }
    
    override func viewWillDisappear(_ animated: Bool) {
          super.viewWillDisappear(animated)
          removeNotificationObserver()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var feedbackTextView: UITextView!
    @IBOutlet var messageTextView: UITextView!
    
    var userSession: UserSessionWorker = UserSessionWorker()
    var loggedIn: Bool {
        return userSession.isLoggedIn()
    }
    
    private var minHeight: CGFloat = 35
    private var maxHeight: CGFloat = 220
    
    @IBOutlet var messageParentView: UIView!
    
    @IBOutlet var messageTableViewTopConstraint: NSLayoutConstraint!
    @IBOutlet var messageTextViewHeightConstraint: NSLayoutConstraint!
    
    @IBOutlet var messageTableView: UITableView!
    
    @IBOutlet var loggedInView: UIView!
    @IBOutlet var loggedOutView: UIView!
    
    @IBOutlet var textViewBotomConstraint: NSLayoutConstraint!
    
    var keyboardHeight: CGFloat = 300
    
    var messages: [MessageModel] = []
    
    func getMessages(){
        startLoading()
        
        let request = Feedback.GetMessages.Request()
        interactor?.getMessages(request: request)
    }
    
    func getTitle(){
        let request = Feedback.GetTitle.Request()
        interactor?.getTitle(request: request)
    }
    
    func displayViews(){
        loggedInView.isHidden = !loggedIn
        loggedOutView.isHidden = loggedIn
        
        if loggedIn {
            navigationItem.rightBarButtonItem = nil
        }
        
        setupMessageDelegate()
        
        getTitle()
        
        setupKeyboardDelegate()
        setupTableView()
        setupMessageBorder()
    }
    
    func displayTitle(viewModel: Feedback.GetTitle.ViewModel) {
        title = viewModel.title
    }
    
    func displaySendFeedback(viewModel: Feedback.SendFeedback.ViewModel)
    {
        showRightBarButton()
        
        if let error = viewModel.error {
            showError(title: "\(title!) Error", error: error)
        } else {
            feedbackSuccess()
        }
    }
    
    func displaySendMessage(viewModel: Feedback.SendMessage.ViewModel) {
        let messageIndex: Array<MessageModel>.Index? = messages.firstIndex(of: viewModel.sentMessage)
        let status: MessageStatus = viewModel.error == nil ? .success : .error
        
        if let messageIndex = messageIndex {
            messages[messageIndex].status = status
        }
        
        if let error = viewModel.error {
            showError(title: "Message Error", error: error)
        }
        
        updateTableView()
    }
    
    func displayMessages(viewModel: Feedback.GetMessages.ViewModel){
        if let error = viewModel.error {
            showError(title: "Message Error", error: error)
        } else {
            stopLoading()
            
            messages = viewModel.messages
            
            messageTableView.reloadData()
            scrollToLastMessage()
            
        }
    }
}

extension FeedbackViewController {
    @IBAction func sendButtonPressed(_ sender: Any) {
        sendFeedback()
    }
    
    func sendFeedback()
    {
        let message = feedbackTextView.text ?? ""
        
        if message.replacingOccurrences(of: " ", with: "") != "" {
            startLoading()
            dismissKeyboard()
            hideRightBarButton()
            
            let request = Feedback.SendFeedback.Request(message: message)
            interactor?.sendFeedback(request: request)
        } else {
            showError(title: "\(title!) Error", error: "Text required")
        }
    }
}

extension FeedbackViewController {
    @IBAction func sendMessageButtonPressed(_ sender: Any) {
        let message = messageTextView.text ?? ""
        sendTextMessage(message: message)
    }
    
    func setupMessageBorder(){
        messageParentView.layer.borderWidth = 0.5
        messageParentView.layer.borderColor = UIColor.gray.cgColor
        messageParentView.layer.cornerRadius = 18
    }
    
    func sendTextMessage(message: String){
        if message.replacingOccurrences(of: " ", with: "") == "" {
            return
        }
        
        let message: MessageModel = MessageModel(
            type: interactor!.getMessageType(),
            text: message,
            direction: .sent,
            status: .progress
        )
        
        messages.append( message )
        
        updateTableView()
        
        scrollToLastMessage()
        
        clearTextBox()
        
        sendMessage(message: message)
    }
    
    func sendMessage(message: MessageModel){
        let request = Feedback.SendMessage.Request(message: message)
        interactor?.sendMessage(request: request)
    }
    
    func updateTableView(){
        UIView.setAnimationsEnabled(false)
        messageTableView.beginUpdates()
        messageTableView.reloadSections(NSIndexSet(index: 0) as IndexSet, with: UITableView.RowAnimation.none)
        messageTableView.endUpdates()
    }
    
    func clearTextBox(){
        messageTextView.text = ""
    }
}

extension FeedbackViewController {
    func retryMessagePressed(message: MessageModel){
        sendMessage(message: message)
    }
}

extension FeedbackViewController {
    func openKeyboardOnTextView(){
        feedbackTextView.becomeFirstResponder()
    }
    
    func dismissKeyboard(){
        view.endEditing(true)
    }
}

extension FeedbackViewController {
    func feedbackSuccess(){
        let appearance = SCLAlertView.SCLAppearance(
            kTitleFont: UIFont(name: "HelveticaNeue", size: 22)!,
            kTextFont: UIFont(name: "HelveticaNeue", size: 16)!,
            kButtonFont: UIFont(name: "HelveticaNeue-Bold", size: 14)!,
            showCloseButton: false
        )
        
        let alert = SCLAlertView(appearance: appearance)
        
        alert.showSuccess(
            "Successfully Sent",
            subTitle: "You will not be able to get a response without logging in.",
            closeButtonTitle: "Okay",
            timeout: .init(timeoutValue: TimeInterval(2), timeoutAction: {
                self.router?.routeToSettings(segue: nil)
            }),
            colorStyle: 0x1976CD,
            colorTextButton: 0xFFFFFF,
            circleIconImage: nil,
            animationStyle: .bottomToTop
        )
    }
}

extension FeedbackViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}


extension FeedbackViewController {
    func showRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = true
    }
    
    func hideRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = false
    }
}

extension FeedbackViewController {
    func setupKeyboardDelegate(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(keyboardWillShow),
            name: UIResponder.keyboardWillShowNotification,
            object: nil
        )
    }
    
    @objc func keyboardWillShow(_ notification: Notification) {
        if let keyboardFrame: NSValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue {
            let keyboardRectangle = keyboardFrame.cgRectValue
            
            keyboardHeight = keyboardRectangle.height - 70
            textViewBotomConstraint.constant = keyboardHeight
        }
    }
    
}

extension FeedbackViewController: UITextViewDelegate {
    func setupMessageDelegate() {
        messageTextView.delegate = self
    }
    
    func textViewDidChangeSelection(_ textView: UITextView) {
        updateTextViewHeight()
    }
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        textViewBotomConstraint.constant = keyboardHeight
        updateTextViewHeight()
        scrollToLastMessage()
    }
    
    func textViewDidEndEditing(_ textView: UITextView) {
        textViewBotomConstraint.constant = 0
        scrollToLastMessage()
    }
    
    func textViewDidChange(_ textView: UITextView) {
        updateTextViewHeight()
    }
    
    func updateTextViewHeight(){
        var height = self.minHeight
        
        if messageTextView.contentSize.height <= self.minHeight {
            height = self.minHeight
        } else if messageTextView.contentSize.height >= self.maxHeight {
            height = self.maxHeight
        } else {
            height = messageTextView.contentSize.height
        }
        
        self.messageTextViewHeightConstraint.constant = height
        
        UIView.animate(withDuration: 0.1) {
            self.view.layoutIfNeeded()
        }
    }
    
    func scrollToLastMessage(){
        if messages.count > 0 {
            messageTableView.scrollToRow(at: IndexPath(row: messages.count - 1, section: 0), at: .bottom, animated: true)
        }
    }
}


extension FeedbackViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureMessageCell(indexPath: indexPath)
    }
    
    func configureMessageCell(indexPath: IndexPath) -> MessageCell {
        let cell = messageTableView.dequeueReusableCell(withIdentifier: "MessageCell", for: indexPath) as! MessageCell
        
        cell.message = messages[indexPath.row]
        
        cell.retryButtonPressed = retryMessagePressed
        
        cell.configureUI()
        
        return cell
    }
    
    func setupTableView(){
        let settingCellNib = UINib(nibName: "MessageCell", bundle: nil)
        messageTableView.register(settingCellNib, forCellReuseIdentifier: "MessageCell")
        
        messageTableView.delegate = self
        messageTableView.dataSource = self
    }
}

extension FeedbackViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let message: MessageModel = messages[indexPath.row]
        if message.status == .error {
            print("Retry Request")
        }
    }
}

extension FeedbackViewController {
    func setupNotificationObserver(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(messageNotificationReceived(_:)),
            name: NSNotification.Name(rawValue: "messageNotificationReceived"),
            object: nil
        )
    }

    func removeNotificationObserver(){
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name(rawValue: "messageNotificationReceived"), object: nil)
    }

    @objc func messageNotificationReceived(_ notification:Notification) {
        getMessages()
    }
}
