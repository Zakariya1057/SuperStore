//
//  FeedbackViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 06/05/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SCLAlertView

protocol FeedbackDisplayLogic: AnyObject
{
    func displaySendFeedback(viewModel: Feedback.SendFeedback.ViewModel)
    func displayTitle(viewModel: Feedback.GetTitle.ViewModel)
}

class FeedbackViewController: UIViewController, FeedbackDisplayLogic
{
    
    var interactor: FeedbackBusinessLogic?
    var router: (NSObjectProtocol & FeedbackRoutingLogic & FeedbackDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FeedbackInteractor()
        let presenter = FeedbackPresenter()
        let router = FeedbackRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupMessageDelegate()
        getTitle()
        
        setupTableView()
        setupMessageBorder()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        messageTableView.reloadData()
//        openKeyboardOnTextView()
    }
    
    let spinner: SpinnerViewController = SpinnerViewController()
    
    @IBOutlet var feedbackTextView: UITextView!
    @IBOutlet var messageTextView: UITextView!
    
    private var minHeight: CGFloat = 35
    private var maxHeight: CGFloat = 220
    
    @IBOutlet var messageParentView: UIView!
    
    @IBOutlet var messageTableViewTopConstraint: NSLayoutConstraint!
    @IBOutlet var messageTextViewHeightConstraint: NSLayoutConstraint!
    
    @IBOutlet var messageTableView: UITableView!
    
    var messages: [MessageModel] = [
        MessageModel(text: "How may I be of assinstance today?", type: .received, createdAt: Date()),
        MessageModel(text: "I love your app, its amazing", type: .sent, createdAt: Date()),
        
        MessageModel(text: "Hey                                 Hey", type: .sent, createdAt: Date()),
        
        MessageModel(text: "L", type: .sent, createdAt: Date()),
        
        MessageModel(text: "Hey                                 Hey", type: .received, createdAt: Date()),
        
        MessageModel(text: "The more polite expression is “How may I help you?” (“may,” not “many”). You will also hear people say “How can I help you?” To the punctilious, “may” is ..", type: .received, createdAt: Date()),
        
        
        MessageModel(text: "The more polite expression is “How may I help you?” (“may,” not “many”). You will also hear people say “How can I help you?” To the punctilious, “may” is ..", type: .sent, createdAt: Date()),
        
        MessageModel(text: "Sorry about this?", type: .sent, createdAt: Date()),
    ]
    
    func getTitle(){
        let request = Feedback.GetTitle.Request()
        interactor?.getTitle(request: request)
    }
    
    func displayTitle(viewModel: Feedback.GetTitle.ViewModel) {
        title = viewModel.title
    }
    
    func displaySendFeedback(viewModel: Feedback.SendFeedback.ViewModel)
    {
        stopLoading()
        showRightBarButton()
        
        if let error = viewModel.error {
            showError(title: "\(title!) Error", error: error)
        } else {
            feedbackSuccess()
        }
    }
    
    func setupMessageBorder(){
        messageParentView.layer.borderWidth = 0.5
        messageParentView.layer.borderColor = UIColor.gray.cgColor
        messageParentView.layer.cornerRadius = 18
    }
    
    func sendFeedback()
    {
        let message = feedbackTextView.text ?? ""
        
        if message.replacingOccurrences(of: " ", with: "") != "" {
            startLoading()
            dismissKeyboard()
            hideRightBarButton()
            
            let request = Feedback.SendFeedback.Request(message: message)
            interactor?.sendFeedback(request: request)
        } else {
            showError(title: "\(title!) Error", error: "Text required")
        }
    }
    
    @IBAction func sendButtonPressed(_ sender: Any) {
        sendFeedback()
    }
    
    @IBAction func sendMessageButtonPressed(_ sender: Any) {
        let text = messageTextView.text ?? ""
        
        messages.append(
            MessageModel(text: text, type: .sent, createdAt: Date())
        )
        
        messageTextView.text = ""
        
        messageTableView.reloadData()
        
        messageTableView.scrollToRow(at: IndexPath(row: messages.count - 1, section: 0), at: .top, animated: true)
        
//        updateTextViewHeight()
    }
}

extension FeedbackViewController {
    func openKeyboardOnTextView(){
        feedbackTextView.becomeFirstResponder()
    }
    
    func dismissKeyboard(){
        view.endEditing(true)
    }
}

extension FeedbackViewController {
    // Alert. Thank You for the feedback.
    func feedbackSuccess(){
        let appearance = SCLAlertView.SCLAppearance(
            kTitleFont: UIFont(name: "HelveticaNeue", size: 22)!,
            kTextFont: UIFont(name: "HelveticaNeue", size: 16)!,
            kButtonFont: UIFont(name: "HelveticaNeue-Bold", size: 14)!,
            showCloseButton: false
        )

        let alert = SCLAlertView(appearance: appearance)
        
        alert.showSuccess(
            "Message Sent",
            subTitle: "Thanks for being awesome!",
            closeButtonTitle: "Okay",
            timeout: .init(timeoutValue: TimeInterval(2), timeoutAction: {
                self.router?.routeToSettings(segue: nil)
            }),
            colorStyle: 0x1976CD,
            colorTextButton: 0xFFFFFF,
            circleIconImage: nil,
            animationStyle: .bottomToTop)
        
    }
}
extension FeedbackViewController {
    func startLoading() {
        addChild(spinner)
        spinner.view.frame = view.frame
        view.addSubview(spinner.view)
        spinner.didMove(toParent: self)
    }
    
    func stopLoading(){
        spinner.willMove(toParent: nil)
        spinner.view.removeFromSuperview()
        spinner.removeFromParent()
    }
}


extension FeedbackViewController {
    func showRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = true
    }
    
    func hideRightBarButton(){
        navigationItem.rightBarButtonItem?.isEnabled = false
    }
}

extension FeedbackViewController: UITextViewDelegate {
    func setupMessageDelegate() {
        messageTextView.delegate = self
    }
    
    func textViewDidChangeSelection(_ textView: UITextView) {
        updateTextViewHeight()
    }
    
    func textViewDidBeginEditing(_ textView: UITextView) {
        updateTextViewHeight()
    }
    
    func textViewDidChange(_ textView: UITextView) {
        updateTextViewHeight()
    }
    
    func updateTextViewHeight(){
        var height = self.minHeight

        if messageTextView.contentSize.height <= self.minHeight {
            height = self.minHeight
        } else if messageTextView.contentSize.height >= self.maxHeight {
            height = self.maxHeight
        } else {
            height = messageTextView.contentSize.height
        }

        self.messageTextViewHeightConstraint.constant = height

        UIView.animate(withDuration: 0.1) {
            self.view.layoutIfNeeded()
        }
    }
}


extension FeedbackViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return messages.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureMessageCell(indexPath: indexPath)
    }
    
    func configureMessageCell(indexPath: IndexPath) -> MessageCell {
        let cell = messageTableView.dequeueReusableCell(withIdentifier: "MessageCell", for: indexPath) as! MessageCell

        cell.message = messages[indexPath.row]
        
        cell.configureUI()
        
        return cell
    }
    
    func setupTableView(){
        let settingCellNib = UINib(nibName: "MessageCell", bundle: nil)
        messageTableView.register(settingCellNib, forCellReuseIdentifier: "MessageCell")
        
        messageTableView.delegate = self
        messageTableView.dataSource = self
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView()
        view.backgroundColor = UIColor(named: "Grey.Clear")
        return view
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return section == 0 ? 0 : 40
    }
}
