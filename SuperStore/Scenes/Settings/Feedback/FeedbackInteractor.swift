//
//  FeedbackInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 06/05/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FeedbackBusinessLogic
{
    func getTitle(request: Feedback.GetTitle.Request)
    
    func sendFeedback(request: Feedback.SendFeedback.Request)
    func sendMessage(request: Feedback.SendMessage.Request)
    
    func getMessages(request: Feedback.GetMessages.Request)
}

protocol FeedbackDataStore
{
    var setting: SettingModel! { get set }
}

class FeedbackInteractor: FeedbackBusinessLogic, FeedbackDataStore
{
    
    var presenter: FeedbackPresentationLogic?
    
    var feedbackWorker: FeedbackWorker = FeedbackWorker(feedbackAPI: FeedbackAPI())
    var messageWorker: MessageWorker = MessageWorker(messageAPI: MessageAPI())
    
    var setting: SettingModel!
    
    func getTitle(request: Feedback.GetTitle.Request) {
        let response = Feedback.GetTitle.Response(title: setting.name)
        presenter?.presentTitle(response: response)
    }
    
    func sendFeedback(request: Feedback.SendFeedback.Request)
    {
        let message: String = request.message
        
        feedbackWorker.sendFeedback(type: setting.type, message: message) { (error: String?) in
            let response = Feedback.SendFeedback.Response(error: error)
            self.presenter?.presentSendFeedback(response: response)
        }
    }
    
    func sendMessage(request: Feedback.SendMessage.Request){
        let message: String = request.message
        let type: FeedbackType = request.type
        
        messageWorker.sendMessage(type: type, message: message) { (error: String?) in
            let response = Feedback.SendMessage.Response(error: error)
            self.presenter?.presentSendMessage(response: response)
        }
    }
    
    func getMessages(request: Feedback.GetMessages.Request){
        messageWorker.getMessages { (messages: [MessageModel], error: String?) in
            let response = Feedback.GetMessages.Response(messages: messages, error: error)
            self.presenter?.presentMessages(response: response)
        }
    }
}
