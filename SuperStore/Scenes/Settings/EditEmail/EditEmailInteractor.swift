//
//  EditEmailInteractor.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 03/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditEmailBusinessLogic
{
    func getEmail(request: EditEmail.GetEmail.Request)
    func updateEmail(request: EditEmail.UpdateEmail.Request)
}

protocol EditEmailDataStore
{
    var email: String { get set }
}

class EditEmailInteractor: EditEmailBusinessLogic, EditEmailDataStore
{
    var presenter: EditEmailPresentationLogic?

    var userWorker: UserSettingsWorker = UserSettingsWorker(userStore: UserRealmStore())
    var validationWorker: UserValidationWorker = UserValidationWorker()
    
    var email: String = ""
    
    func getEmail(request: EditEmail.GetEmail.Request)
    {
        let response = EditEmail.GetEmail.Response(email: email)
        presenter?.presentEmail(response: response)
    }
    
    func updateEmail(request: EditEmail.UpdateEmail.Request){
        
        let formFields: [UserFormField] = [
            UserFormField(name: "Email", value: request.email, type: .email)
        ]
        
        let error = validationWorker.validateFields(formFields)
        
        if let error = error {
            let response = EditEmail.UpdateEmail.Response(error: error)
            self.presenter?.presentEmailUpdated(response: response)
        } else {
            userWorker.updateEmail(email: request.email) { (error: String?) in
                let response = EditEmail.UpdateEmail.Response(error: error)
                self.presenter?.presentEmailUpdated(response: response)
            }
        }
        
    }
}
