//
//  FavouritesViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 01/03/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavouritesDisplayLogic: class
{
    func displayFavourites(viewModel: Favourites.GetFavourites.ViewModel)
    func displayDeleteFavourite(viewModel: Favourites.DeleteFavourite.ViewModel)
}

class FavouritesViewController: UIViewController, FavouritesDisplayLogic
{
    var interactor: FavouritesBusinessLogic?
    var router: (NSObjectProtocol & FavouritesRoutingLogic & FavouritesDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = FavouritesInteractor()
        let presenter = FavouritesPresenter()
        let router = FavouritesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupFavouriteTableView()
        getFavourites()
    }
    
    
    // MARK: IB Outlets
    @IBOutlet var favouriteTableView: UITableView!
    
    var products: [ProductModel] = []
    
    var selectedProductID: Int?
    
    var refreshControl = UIRefreshControl()
    
    func getFavourites()
    {
        let request = Favourites.GetFavourites.Request()
        interactor?.getFavourites(request: request)
    }
    
    func displayFavourites(viewModel: Favourites.GetFavourites.ViewModel)
    {
        if let error = viewModel.error {
            showError(title: "Home Error", error: error)
        } else {
            products = viewModel.products
            favouriteTableView.reloadData()
        }
        
        refreshControl.endRefreshing()
    }
    
    func displayDeleteFavourite(viewModel: Favourites.DeleteFavourite.ViewModel){
        
    }
    
    @objc func refreshFavourites(){
        getFavourites()
    }
    
}

extension FavouritesViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureProductCell(indexPath: indexPath)
    }
    
    func configureProductCell(indexPath: IndexPath) -> ProductCell {
        let cell = favouriteTableView.dequeueReusableCell(withIdentifier: "ProductCell", for: indexPath) as! ProductCell
        
        cell.product = products[indexPath.row]
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupFavouriteTableView(){
        let productCellNib = UINib(nibName: "ProductCell", bundle: nil)
        favouriteTableView.register(productCellNib, forCellReuseIdentifier: "ProductCell")
        
        favouriteTableView.delegate = self
        favouriteTableView.dataSource = self
        
        setupRefreshControl()
    }
    
    func setupRefreshControl(){
        refreshControl.attributedTitle = NSAttributedString(string: "Pull To Refresh")
        refreshControl.addTarget(self, action: #selector(refreshFavourites), for: .valueChanged)
        favouriteTableView.addSubview(refreshControl)
    }
}

extension FavouritesViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedProductID = products[indexPath.row].id
        router?.routeToShowProduct(segue: nil)
    }
}

//MARK: - Editing Table

extension FavouritesViewController{
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        
        if editingStyle == .delete {
            let deleteProduct = products[indexPath.row]
            
            let request = Favourites.DeleteFavourite.Request(productID: deleteProduct.id)
            interactor?.deleteFavourite(request: request)
            
            products.remove(at: indexPath.row)
            favouriteTableView.deleteRows(at: [indexPath], with: .fade)
        }
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
}
