//
//  PromotionGroupViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 07/05/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PromotionGroupDisplayLogic: AnyObject
{
    func displayPromotions(viewModel: PromotionGroup.GetPromotions.ViewModel)
}

class PromotionGroupViewController: UIViewController, PromotionGroupDisplayLogic
{
    var interactor: PromotionGroupBusinessLogic?
    var router: (NSObjectProtocol & PromotionGroupRoutingLogic & PromotionGroupDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PromotionGroupInteractor()
        let presenter = PromotionGroupPresenter()
        let router = PromotionGroupRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupPromotionsTableView()
        getPromotions()
    }
    
    var loading: Bool = false
    
    var promotionGroup: String!
    var promotions: [PromotionModel] = []
    
    @IBOutlet var promotionsTableView: UITableView!
    
    var refreshControl = UIRefreshControl()
    
    func getPromotions()
    {
        let request = PromotionGroup.GetPromotions.Request()
        interactor?.getPromotions(request: request)
    }
    
    func displayPromotions(viewModel: PromotionGroup.GetPromotions.ViewModel)
    {
        refreshControl.endRefreshing()
        
        promotionGroup = viewModel.promotionGroup
        promotions = viewModel.promotions
        
        setTitle()
        promotionsTableView.reloadData()
    }
    
    private func setTitle(){
        title = promotionGroup!
    }
}

extension PromotionGroupViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {

        let header = promotionsTableView.dequeueReusableHeaderFooterView(withIdentifier:  "ListSectionHeader") as! ListSectionHeader

        let categoryName = loading ? "" : promotions[section].name
        
        header.headingLabel.text = categoryName
        
        return header
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return promotions.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return loading ? 1 : promotions[section].products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return configureProductCell(indexPath: indexPath)
    }

    func configureProductCell(indexPath: IndexPath) -> ProductCell {
        let cell = promotionsTableView.dequeueReusableCell(withIdentifier: "ProductCell", for: indexPath) as! ProductCell
        
        cell.loading = loading
        cell.product = loading ? nil : promotions[indexPath.section].products[indexPath.row]
        cell.configureUI()
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
    
    func setupPromotionsTableView(){
        let productCellNib = UINib(nibName: "ProductCell", bundle: nil)
        promotionsTableView.register(productCellNib, forCellReuseIdentifier: "ProductCell")
        
        promotionsTableView.delegate = self
        promotionsTableView.dataSource = self
        
        setupSectionViews()
        setupRefreshControl()
    }
    
    func setupSectionViews(){
        let listSectionNib = UINib(nibName: "ListSectionHeader", bundle: nil)
        promotionsTableView.register(listSectionNib, forHeaderFooterViewReuseIdentifier: "ListSectionHeader")
    }
    
    func setupRefreshControl(){
        refreshControl.attributedTitle = NSAttributedString(string: "Pull To Refresh")
        refreshControl.addTarget(self, action: #selector(refreshResults), for: .valueChanged)
        promotionsTableView.addSubview(refreshControl)
    }
    
    @objc func refreshResults(){
        getPromotions()
    }
}

extension PromotionGroupViewController {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !loading {
            let productID = promotions[indexPath.section].products[indexPath.row].id
            interactor?.setProductSelected(productID: productID)
            router?.routeToShowProduct(segue: nil)
        }
    }
}
