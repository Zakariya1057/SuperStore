//
//  HomeViewController.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 27/02/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
    func displayHome(viewModel: Home.GetHome.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic, UITableViewDataSource, UITableViewDelegate
{
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupHomeCells()
        registerTableViewCells()
        getHome()
    }
    
    //MARK: - IB Outlets
    
    @IBOutlet var tableView: UITableView!
    
    var scrollPositions: [String: CGFloat] = [:]
    var homeCells: [CustomElementModel] = []
    
    var homeModel: HomeModel?
    var loading: Bool = false
    
    func getHome()
    {
        let request = Home.GetHome.Request()
        interactor?.getHome(request: request)
    }
    
    //MARK: - Display
    
    func displayHome(viewModel: Home.GetHome.ViewModel)
    {
        homeModel = viewModel.home
        populateCells()
    }
    
}

extension HomeViewController {
    private func populateCells(){
        if let homeModel = homeModel {
            
            setupHomeCells()
            
            for element in homeCells {
                
                switch element {
                case is StoresMapElement:
                    let storeElement = element as! StoresMapElement
                    storeElement.stores = homeModel.stores
                    break
                case is GroceryProductElement:
                    let productElement = element as! GroceryProductElement
                    productElement.products = homeModel.groceries
                    break
                case is MonitoringProductElement:
                    let productElement = element as! MonitoringProductElement
                    productElement.products = homeModel.monitoring.reversed()
                    break
                case is OffersElement:
                    let offerElement = element as! OffersElement
                    offerElement.promotions = homeModel.promotions
                    break
                case is FeaturedProductElement:
                    let featuredElement = element as! FeaturedProductElement
                    featuredElement.products = homeModel.featured
                    break
                default:
                    print("Unknown Type Encountered: \(element.type)")
                }
            }
            
            for category in homeModel.categories {
                let name = category.key
                let products = category.value
                let element = ProductElement(title: name, productPressedCallBack: productPressed, scrollCallBack: cellScroll, products: products)
                homeCells.append(element)
            }
            
            tableView.reloadData()
            
        }
    }

}

extension HomeViewController {
    private func registerTableViewCells(){
        let nib = UINib(nibName: K.Sections.HomeHeader.SectionNibName, bundle: nil)
        tableView.register(nib, forHeaderFooterViewReuseIdentifier: K.Sections.HomeHeader.SectionIdentifier)
        
        let productsCellNib = UINib(nibName: "ProductsCell", bundle: nil)
        tableView.register(productsCellNib, forCellReuseIdentifier: "ProductsCell")
        
        let storesCell = UINib(nibName: "StoresMapCell", bundle: nil)
        tableView.register(storesCell, forCellReuseIdentifier: "StoresMapCell")
        
        let offersCell = UINib(nibName: "OffersCell", bundle: nil)
        tableView.register(offersCell, forCellReuseIdentifier: "OffersCell")
        
        let featuredProductsCell = UINib(nibName: "FeaturedProductsCell", bundle: nil)
        tableView.register(featuredProductsCell, forCellReuseIdentifier: "FeaturedProductsCell")
        
        let listsProgressCell = UINib(nibName: "ListsProgressCell", bundle: nil)
        tableView.register(listsProgressCell, forCellReuseIdentifier: "ListsProgressCell")
    }
    
    private func setUpTableView(){
        tableView.dataSource = self
        tableView.delegate = self
    }
    
    private func setupHomeCells(){
        homeCells = [
            ListsProgressElement(title: "List Progress", listPressedCallBack: listPressed, lists: []),
            StoresMapElement(title: "Stores", storePressed: storePressed, stores: []),
            GroceryProductElement(title: "Grocery Items", productPressedCallBack: productPressed, scrollCallBack: cellScroll, products: []),
            MonitoringProductElement(title: "Monitoring", productPressedCallBack: productPressed, scrollCallBack: cellScroll, products: []),
            OffersElement(title: "Offers", offerPressedCallBack: promotionPressed, promotions: []),
            FeaturedProductElement(title: "Featured", productPressedCallBack: productPressed, scrollCallBack: {_,_ in }, products: [])
        ]
    }
}

extension HomeViewController {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return homeCells.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let title = homeCells[section].title
        let header = tableView.dequeueReusableHeaderFooterView(withIdentifier:  K.Sections.HomeHeader.SectionIdentifier) as! HomeSectionHeader
        header.headingLabel.text = title
        return header
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellModel = homeCells[indexPath.section]
        let cellIdentifier = cellModel.type.rawValue
        let customCell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as! CustomElementCell
        
        cellModel.position = scrollPositions[ cellModel.title ]
        cellModel.loading = self.loading
        customCell.configure(withModel: cellModel)
        
        let cell = customCell as! UITableViewCell
        
        cell.selectionStyle = UITableViewCell.SelectionStyle.none
        
        return cell
    }
}

extension HomeViewController {
    private func promotionPressed(promotionID: Int){
        print("Promotion Pressed")
    }
    
    private func storePressed(storeID: Int){
        print("Store Pressed")
    }
    
    private func listPressed(listID: Int){
        print("List Pressed")
    }
    
    private func productPressed(productID: Int){
        print("Product Pressed")
    }
    
    private func cellScroll(position: CGFloat, title: String){
        scrollPositions[title] = position
    }
}

enum CustomElementType: String {
    case products         = "ProductsCell"
    case storesMap        = "StoresMapCell"
    case listsProgress    = "ListsProgressCell"
    case offers           = "OffersCell"
    case featuredProducts = "FeaturedProductsCell"
    case listPriceUpdate  = "ListPriceUpdate"
}

// Each custom element model must have a defined type which is a custom element type.
protocol CustomElementModel: class {
    var title: String { get }
    var type: CustomElementType { get }
    var position: CGFloat? { get set }
    var loading: Bool { get set }
}

protocol CustomElementCell: class {
    func configure(withModel: CustomElementModel)
}
