//
//  HomeWorker.swift
//  SuperStore
//
//  Created by Zakariya Mohummed on 27/02/2021.
//  Copyright (c) 2021 Zakariya Mohummed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class HomeWorker
{
    private var homeAPI: HomeRequestProtocol
    private var homeStore: HomeStoreProtocol
    
    private var notificationWorker: NotificationWorker = NotificationWorker()
    
    private var promotionStore: PromotionStoreProtocol = PromotionRealmStore()
    
    init(homeAPI: HomeRequestProtocol) {
        self.homeAPI = homeAPI
        self.homeStore = HomeRealmStore()
    }
    
    func getHome(regionID: Int, supermarketChainID: Int, latitude: Double?, longitude: Double?, completionHandler: @escaping (_ home: HomeModel?, _ error: String?) -> Void){
        
        notificationWorker.updateBadgeNumber()
        
        if let home = homeStore.getHome(supermarketChainID: supermarketChainID) {
            completionHandler(home, nil)
        }
        
        homeAPI.getHome(regionID: regionID, supermarketChainID: supermarketChainID, latitude: latitude, longitude: longitude) { (home: HomeModel?, error: String?) in
            
            var homeModel = home
            
            if homeModel != nil {
                
                // If home promotions expired, then remove them
                for (index, promotion) in homeModel!.promotions.enumerated() {
                    if self.promotionStore.promotionExpired(promotion: promotion){
                        if homeModel!.promotions.indices.contains(index){
                            homeModel!.promotions.remove(at: index)
                        }
                    }
                }
                
                self.homeStore.createHome(supermarketChainID: supermarketChainID, home: homeModel!)
                
                self.notificationWorker.updateBadgeNumber()
                
            }
            
            completionHandler(homeModel, error)
        }
    }
}

protocol HomeRequestProtocol {
    func getHome(regionID: Int, supermarketChainID: Int, latitude: Double?, longitude: Double?, completionHandler: @escaping (_ home: HomeModel?, _ error: String?) -> Void)
}

protocol HomeStoreProtocol {
    func createHome(supermarketChainID: Int, home: HomeModel)
    func getHome(supermarketChainID: Int) -> HomeModel?
}
